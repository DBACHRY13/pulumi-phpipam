// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"errors"
	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vlan struct {
	pulumi.CustomResourceState

	// A key/value map of custom fields for this
	// VLAN.
	//
	// ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	CustomFields pulumi.MapOutput `pulumi:"customFields"`
	// The description supplied to the VLAN.
	Description pulumi.StringOutput `pulumi:"description"`
	// The date this resource was last updated.
	EditDate pulumi.StringOutput `pulumi:"editDate"`
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId pulumi.IntOutput `pulumi:"l2DomainId"`
	// The name/label of the VLAN.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of the VLAN (the actual VLAN ID on your switch).
	Number pulumi.IntOutput `pulumi:"number"`
	// The ID of the VLAN to look up. **NOTE:** this is the database ID,
	// not the VLAN number - if you need this, use the `number` parameter.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewVlan registers a new resource with the given unique name, arguments, and options.
func NewVlan(ctx *pulumi.Context,
	name string, args *VlanArgs, opts ...pulumi.ResourceOption) (*Vlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Number == nil {
		return nil, errors.New("invalid value for required argument 'Number'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vlan
	err := ctx.RegisterResource("phpipam:index/vlan:Vlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlan gets an existing Vlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanState, opts ...pulumi.ResourceOption) (*Vlan, error) {
	var resource Vlan
	err := ctx.ReadResource("phpipam:index/vlan:Vlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vlan resources.
type vlanState struct {
	// A key/value map of custom fields for this
	// VLAN.
	//
	// ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	CustomFields map[string]interface{} `pulumi:"customFields"`
	// The description supplied to the VLAN.
	Description *string `pulumi:"description"`
	// The date this resource was last updated.
	EditDate *string `pulumi:"editDate"`
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId *int `pulumi:"l2DomainId"`
	// The name/label of the VLAN.
	Name *string `pulumi:"name"`
	// The number of the VLAN (the actual VLAN ID on your switch).
	Number *int `pulumi:"number"`
	// The ID of the VLAN to look up. **NOTE:** this is the database ID,
	// not the VLAN number - if you need this, use the `number` parameter.
	VlanId *int `pulumi:"vlanId"`
}

type VlanState struct {
	// A key/value map of custom fields for this
	// VLAN.
	//
	// ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	CustomFields pulumi.MapInput
	// The description supplied to the VLAN.
	Description pulumi.StringPtrInput
	// The date this resource was last updated.
	EditDate pulumi.StringPtrInput
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId pulumi.IntPtrInput
	// The name/label of the VLAN.
	Name pulumi.StringPtrInput
	// The number of the VLAN (the actual VLAN ID on your switch).
	Number pulumi.IntPtrInput
	// The ID of the VLAN to look up. **NOTE:** this is the database ID,
	// not the VLAN number - if you need this, use the `number` parameter.
	VlanId pulumi.IntPtrInput
}

func (VlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanState)(nil)).Elem()
}

type vlanArgs struct {
	// A key/value map of custom fields for this
	// VLAN.
	//
	// ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	CustomFields map[string]interface{} `pulumi:"customFields"`
	// The description supplied to the VLAN.
	Description *string `pulumi:"description"`
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId *int `pulumi:"l2DomainId"`
	// The name/label of the VLAN.
	Name *string `pulumi:"name"`
	// The number of the VLAN (the actual VLAN ID on your switch).
	Number int `pulumi:"number"`
}

// The set of arguments for constructing a Vlan resource.
type VlanArgs struct {
	// A key/value map of custom fields for this
	// VLAN.
	//
	// ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	CustomFields pulumi.MapInput
	// The description supplied to the VLAN.
	Description pulumi.StringPtrInput
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId pulumi.IntPtrInput
	// The name/label of the VLAN.
	Name pulumi.StringPtrInput
	// The number of the VLAN (the actual VLAN ID on your switch).
	Number pulumi.IntInput
}

func (VlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanArgs)(nil)).Elem()
}

type VlanInput interface {
	pulumi.Input

	ToVlanOutput() VlanOutput
	ToVlanOutputWithContext(ctx context.Context) VlanOutput
}

func (*Vlan) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (i *Vlan) ToVlanOutput() VlanOutput {
	return i.ToVlanOutputWithContext(context.Background())
}

func (i *Vlan) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanOutput)
}

// VlanArrayInput is an input type that accepts VlanArray and VlanArrayOutput values.
// You can construct a concrete instance of `VlanArrayInput` via:
//
//	VlanArray{ VlanArgs{...} }
type VlanArrayInput interface {
	pulumi.Input

	ToVlanArrayOutput() VlanArrayOutput
	ToVlanArrayOutputWithContext(context.Context) VlanArrayOutput
}

type VlanArray []VlanInput

func (VlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (i VlanArray) ToVlanArrayOutput() VlanArrayOutput {
	return i.ToVlanArrayOutputWithContext(context.Background())
}

func (i VlanArray) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanArrayOutput)
}

// VlanMapInput is an input type that accepts VlanMap and VlanMapOutput values.
// You can construct a concrete instance of `VlanMapInput` via:
//
//	VlanMap{ "key": VlanArgs{...} }
type VlanMapInput interface {
	pulumi.Input

	ToVlanMapOutput() VlanMapOutput
	ToVlanMapOutputWithContext(context.Context) VlanMapOutput
}

type VlanMap map[string]VlanInput

func (VlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (i VlanMap) ToVlanMapOutput() VlanMapOutput {
	return i.ToVlanMapOutputWithContext(context.Background())
}

func (i VlanMap) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMapOutput)
}

type VlanOutput struct{ *pulumi.OutputState }

func (VlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (o VlanOutput) ToVlanOutput() VlanOutput {
	return o
}

func (o VlanOutput) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return o
}

// A key/value map of custom fields for this
// VLAN.
//
// ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
// all fields set to optional when using this plugin. For more info see
// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
// ensure that your fields also do not have default values, or ensure the default
// is set in your TF configuration. Diff loops may happen otherwise!
func (o VlanOutput) CustomFields() pulumi.MapOutput {
	return o.ApplyT(func(v *Vlan) pulumi.MapOutput { return v.CustomFields }).(pulumi.MapOutput)
}

// The description supplied to the VLAN.
func (o VlanOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The date this resource was last updated.
func (o VlanOutput) EditDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.EditDate }).(pulumi.StringOutput)
}

// The layer 2 domain ID in the PHPIPAM database.
func (o VlanOutput) L2DomainId() pulumi.IntOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntOutput { return v.L2DomainId }).(pulumi.IntOutput)
}

// The name/label of the VLAN.
func (o VlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of the VLAN (the actual VLAN ID on your switch).
func (o VlanOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

// The ID of the VLAN to look up. **NOTE:** this is the database ID,
// not the VLAN number - if you need this, use the `number` parameter.
func (o VlanOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

type VlanArrayOutput struct{ *pulumi.OutputState }

func (VlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (o VlanArrayOutput) ToVlanArrayOutput() VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) Index(i pulumi.IntInput) VlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].([]*Vlan)[vs[1].(int)]
	}).(VlanOutput)
}

type VlanMapOutput struct{ *pulumi.OutputState }

func (VlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (o VlanMapOutput) ToVlanMapOutput() VlanMapOutput {
	return o
}

func (o VlanMapOutput) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return o
}

func (o VlanMapOutput) MapIndex(k pulumi.StringInput) VlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].(map[string]*Vlan)[vs[1].(string)]
	}).(VlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanInput)(nil)).Elem(), &Vlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanArrayInput)(nil)).Elem(), VlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanMapInput)(nil)).Elem(), VlanMap{})
	pulumi.RegisterOutputType(VlanOutput{})
	pulumi.RegisterOutputType(VlanArrayOutput{})
	pulumi.RegisterOutputType(VlanMapOutput{})
}
