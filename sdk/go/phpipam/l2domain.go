// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type L2domain struct {
	pulumi.CustomResourceState

	Description pulumi.StringOutput `pulumi:"description"`
	DomainId    pulumi.IntOutput    `pulumi:"domainId"`
	Name        pulumi.StringOutput `pulumi:"name"`
	Sections    pulumi.StringOutput `pulumi:"sections"`
}

// NewL2domain registers a new resource with the given unique name, arguments, and options.
func NewL2domain(ctx *pulumi.Context,
	name string, args *L2domainArgs, opts ...pulumi.ResourceOption) (*L2domain, error) {
	if args == nil {
		args = &L2domainArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource L2domain
	err := ctx.RegisterResource("phpipam:index/l2domain:L2domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetL2domain gets an existing L2domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL2domain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *L2domainState, opts ...pulumi.ResourceOption) (*L2domain, error) {
	var resource L2domain
	err := ctx.ReadResource("phpipam:index/l2domain:L2domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering L2domain resources.
type l2domainState struct {
	Description *string `pulumi:"description"`
	DomainId    *int    `pulumi:"domainId"`
	Name        *string `pulumi:"name"`
	Sections    *string `pulumi:"sections"`
}

type L2domainState struct {
	Description pulumi.StringPtrInput
	DomainId    pulumi.IntPtrInput
	Name        pulumi.StringPtrInput
	Sections    pulumi.StringPtrInput
}

func (L2domainState) ElementType() reflect.Type {
	return reflect.TypeOf((*l2domainState)(nil)).Elem()
}

type l2domainArgs struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	Sections    *string `pulumi:"sections"`
}

// The set of arguments for constructing a L2domain resource.
type L2domainArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Sections    pulumi.StringPtrInput
}

func (L2domainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*l2domainArgs)(nil)).Elem()
}

type L2domainInput interface {
	pulumi.Input

	ToL2domainOutput() L2domainOutput
	ToL2domainOutputWithContext(ctx context.Context) L2domainOutput
}

func (*L2domain) ElementType() reflect.Type {
	return reflect.TypeOf((**L2domain)(nil)).Elem()
}

func (i *L2domain) ToL2domainOutput() L2domainOutput {
	return i.ToL2domainOutputWithContext(context.Background())
}

func (i *L2domain) ToL2domainOutputWithContext(ctx context.Context) L2domainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L2domainOutput)
}

// L2domainArrayInput is an input type that accepts L2domainArray and L2domainArrayOutput values.
// You can construct a concrete instance of `L2domainArrayInput` via:
//
//	L2domainArray{ L2domainArgs{...} }
type L2domainArrayInput interface {
	pulumi.Input

	ToL2domainArrayOutput() L2domainArrayOutput
	ToL2domainArrayOutputWithContext(context.Context) L2domainArrayOutput
}

type L2domainArray []L2domainInput

func (L2domainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L2domain)(nil)).Elem()
}

func (i L2domainArray) ToL2domainArrayOutput() L2domainArrayOutput {
	return i.ToL2domainArrayOutputWithContext(context.Background())
}

func (i L2domainArray) ToL2domainArrayOutputWithContext(ctx context.Context) L2domainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L2domainArrayOutput)
}

// L2domainMapInput is an input type that accepts L2domainMap and L2domainMapOutput values.
// You can construct a concrete instance of `L2domainMapInput` via:
//
//	L2domainMap{ "key": L2domainArgs{...} }
type L2domainMapInput interface {
	pulumi.Input

	ToL2domainMapOutput() L2domainMapOutput
	ToL2domainMapOutputWithContext(context.Context) L2domainMapOutput
}

type L2domainMap map[string]L2domainInput

func (L2domainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L2domain)(nil)).Elem()
}

func (i L2domainMap) ToL2domainMapOutput() L2domainMapOutput {
	return i.ToL2domainMapOutputWithContext(context.Background())
}

func (i L2domainMap) ToL2domainMapOutputWithContext(ctx context.Context) L2domainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L2domainMapOutput)
}

type L2domainOutput struct{ *pulumi.OutputState }

func (L2domainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L2domain)(nil)).Elem()
}

func (o L2domainOutput) ToL2domainOutput() L2domainOutput {
	return o
}

func (o L2domainOutput) ToL2domainOutputWithContext(ctx context.Context) L2domainOutput {
	return o
}

func (o L2domainOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *L2domain) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o L2domainOutput) DomainId() pulumi.IntOutput {
	return o.ApplyT(func(v *L2domain) pulumi.IntOutput { return v.DomainId }).(pulumi.IntOutput)
}

func (o L2domainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *L2domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o L2domainOutput) Sections() pulumi.StringOutput {
	return o.ApplyT(func(v *L2domain) pulumi.StringOutput { return v.Sections }).(pulumi.StringOutput)
}

type L2domainArrayOutput struct{ *pulumi.OutputState }

func (L2domainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L2domain)(nil)).Elem()
}

func (o L2domainArrayOutput) ToL2domainArrayOutput() L2domainArrayOutput {
	return o
}

func (o L2domainArrayOutput) ToL2domainArrayOutputWithContext(ctx context.Context) L2domainArrayOutput {
	return o
}

func (o L2domainArrayOutput) Index(i pulumi.IntInput) L2domainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *L2domain {
		return vs[0].([]*L2domain)[vs[1].(int)]
	}).(L2domainOutput)
}

type L2domainMapOutput struct{ *pulumi.OutputState }

func (L2domainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L2domain)(nil)).Elem()
}

func (o L2domainMapOutput) ToL2domainMapOutput() L2domainMapOutput {
	return o
}

func (o L2domainMapOutput) ToL2domainMapOutputWithContext(ctx context.Context) L2domainMapOutput {
	return o
}

func (o L2domainMapOutput) MapIndex(k pulumi.StringInput) L2domainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *L2domain {
		return vs[0].(map[string]*L2domain)[vs[1].(string)]
	}).(L2domainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*L2domainInput)(nil)).Elem(), &L2domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*L2domainArrayInput)(nil)).Elem(), L2domainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L2domainMapInput)(nil)).Elem(), L2domainMap{})
	pulumi.RegisterOutputType(L2domainOutput{})
	pulumi.RegisterOutputType(L2domainArrayOutput{})
	pulumi.RegisterOutputType(L2domainMapOutput{})
}
