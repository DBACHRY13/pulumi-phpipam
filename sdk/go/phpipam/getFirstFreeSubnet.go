// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupFirstFreeSubnet(ctx *pulumi.Context, args *LookupFirstFreeSubnetArgs, opts ...pulumi.InvokeOption) (*LookupFirstFreeSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFirstFreeSubnetResult
	err := ctx.Invoke("phpipam:index/getFirstFreeSubnet:getFirstFreeSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFirstFreeSubnet.
type LookupFirstFreeSubnetArgs struct {
	// The ID of the subnet to look up the subnet in.
	SubnetId int `pulumi:"subnetId"`
	// Mask that will be used to look next available subnet
	SubnetMask int `pulumi:"subnetMask"`
}

// A collection of values returned by getFirstFreeSubnet.
type LookupFirstFreeSubnetResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The next available IP address.
	IpAddress  string `pulumi:"ipAddress"`
	SubnetId   int    `pulumi:"subnetId"`
	SubnetMask int    `pulumi:"subnetMask"`
}

func LookupFirstFreeSubnetOutput(ctx *pulumi.Context, args LookupFirstFreeSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupFirstFreeSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFirstFreeSubnetResult, error) {
			args := v.(LookupFirstFreeSubnetArgs)
			r, err := LookupFirstFreeSubnet(ctx, &args, opts...)
			var s LookupFirstFreeSubnetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFirstFreeSubnetResultOutput)
}

// A collection of arguments for invoking getFirstFreeSubnet.
type LookupFirstFreeSubnetOutputArgs struct {
	// The ID of the subnet to look up the subnet in.
	SubnetId pulumi.IntInput `pulumi:"subnetId"`
	// Mask that will be used to look next available subnet
	SubnetMask pulumi.IntInput `pulumi:"subnetMask"`
}

func (LookupFirstFreeSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirstFreeSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getFirstFreeSubnet.
type LookupFirstFreeSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupFirstFreeSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirstFreeSubnetResult)(nil)).Elem()
}

func (o LookupFirstFreeSubnetResultOutput) ToLookupFirstFreeSubnetResultOutput() LookupFirstFreeSubnetResultOutput {
	return o
}

func (o LookupFirstFreeSubnetResultOutput) ToLookupFirstFreeSubnetResultOutputWithContext(ctx context.Context) LookupFirstFreeSubnetResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFirstFreeSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirstFreeSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The next available IP address.
func (o LookupFirstFreeSubnetResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirstFreeSubnetResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o LookupFirstFreeSubnetResultOutput) SubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFirstFreeSubnetResult) int { return v.SubnetId }).(pulumi.IntOutput)
}

func (o LookupFirstFreeSubnetResultOutput) SubnetMask() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFirstFreeSubnetResult) int { return v.SubnetMask }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFirstFreeSubnetResultOutput{})
}
