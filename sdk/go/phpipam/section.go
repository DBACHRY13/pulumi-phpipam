// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Section struct {
	pulumi.CustomResourceState

	// The section's description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The section's display order number.
	DisplayOrder pulumi.IntOutput `pulumi:"displayOrder"`
	// The ID of the DNS resolver to use in the
	// section.
	DnsResolverId pulumi.IntOutput `pulumi:"dnsResolverId"`
	// The date this resource was last edited.
	EditDate pulumi.StringOutput `pulumi:"editDate"`
	// The ID of the parent section in the PHPIPAM
	// database.
	MasterSectionId pulumi.IntOutput `pulumi:"masterSectionId"`
	// The name of the section.
	Name        pulumi.StringOutput `pulumi:"name"`
	Permissions pulumi.StringOutput `pulumi:"permissions"`
	// The ID of the section in the PHPIPAM database.
	SectionId pulumi.IntOutput `pulumi:"sectionId"`
	// `true` if supernets are only being shown in
	// the subnet listing.
	ShowSupernetOnly pulumi.BoolOutput `pulumi:"showSupernetOnly"`
	// `true` if VLANs are being shown in
	// the subnet listing for this section.
	ShowVlanInSubnetListing pulumi.BoolOutput `pulumi:"showVlanInSubnetListing"`
	// `true` if VRFs are being shown in
	// the subnet listing for this section.
	ShowVrfInSubnetListing pulumi.BoolOutput `pulumi:"showVrfInSubnetListing"`
	// `true` if this subnet is set up to check that IP
	// addresses are valid for the subnets they are in.
	StrictMode pulumi.BoolOutput `pulumi:"strictMode"`
	// How subnets in this section are ordered.
	SubnetOrdering pulumi.StringOutput `pulumi:"subnetOrdering"`
}

// NewSection registers a new resource with the given unique name, arguments, and options.
func NewSection(ctx *pulumi.Context,
	name string, args *SectionArgs, opts ...pulumi.ResourceOption) (*Section, error) {
	if args == nil {
		args = &SectionArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Section
	err := ctx.RegisterResource("phpipam:index/section:Section", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSection gets an existing Section resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SectionState, opts ...pulumi.ResourceOption) (*Section, error) {
	var resource Section
	err := ctx.ReadResource("phpipam:index/section:Section", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Section resources.
type sectionState struct {
	// The section's description.
	Description *string `pulumi:"description"`
	// The section's display order number.
	DisplayOrder *int `pulumi:"displayOrder"`
	// The ID of the DNS resolver to use in the
	// section.
	DnsResolverId *int `pulumi:"dnsResolverId"`
	// The date this resource was last edited.
	EditDate *string `pulumi:"editDate"`
	// The ID of the parent section in the PHPIPAM
	// database.
	MasterSectionId *int `pulumi:"masterSectionId"`
	// The name of the section.
	Name        *string `pulumi:"name"`
	Permissions *string `pulumi:"permissions"`
	// The ID of the section in the PHPIPAM database.
	SectionId *int `pulumi:"sectionId"`
	// `true` if supernets are only being shown in
	// the subnet listing.
	ShowSupernetOnly *bool `pulumi:"showSupernetOnly"`
	// `true` if VLANs are being shown in
	// the subnet listing for this section.
	ShowVlanInSubnetListing *bool `pulumi:"showVlanInSubnetListing"`
	// `true` if VRFs are being shown in
	// the subnet listing for this section.
	ShowVrfInSubnetListing *bool `pulumi:"showVrfInSubnetListing"`
	// `true` if this subnet is set up to check that IP
	// addresses are valid for the subnets they are in.
	StrictMode *bool `pulumi:"strictMode"`
	// How subnets in this section are ordered.
	SubnetOrdering *string `pulumi:"subnetOrdering"`
}

type SectionState struct {
	// The section's description.
	Description pulumi.StringPtrInput
	// The section's display order number.
	DisplayOrder pulumi.IntPtrInput
	// The ID of the DNS resolver to use in the
	// section.
	DnsResolverId pulumi.IntPtrInput
	// The date this resource was last edited.
	EditDate pulumi.StringPtrInput
	// The ID of the parent section in the PHPIPAM
	// database.
	MasterSectionId pulumi.IntPtrInput
	// The name of the section.
	Name        pulumi.StringPtrInput
	Permissions pulumi.StringPtrInput
	// The ID of the section in the PHPIPAM database.
	SectionId pulumi.IntPtrInput
	// `true` if supernets are only being shown in
	// the subnet listing.
	ShowSupernetOnly pulumi.BoolPtrInput
	// `true` if VLANs are being shown in
	// the subnet listing for this section.
	ShowVlanInSubnetListing pulumi.BoolPtrInput
	// `true` if VRFs are being shown in
	// the subnet listing for this section.
	ShowVrfInSubnetListing pulumi.BoolPtrInput
	// `true` if this subnet is set up to check that IP
	// addresses are valid for the subnets they are in.
	StrictMode pulumi.BoolPtrInput
	// How subnets in this section are ordered.
	SubnetOrdering pulumi.StringPtrInput
}

func (SectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sectionState)(nil)).Elem()
}

type sectionArgs struct {
	// The section's description.
	Description *string `pulumi:"description"`
	// The section's display order number.
	DisplayOrder *int `pulumi:"displayOrder"`
	// The ID of the DNS resolver to use in the
	// section.
	DnsResolverId *int `pulumi:"dnsResolverId"`
	// The ID of the parent section in the PHPIPAM
	// database.
	MasterSectionId *int `pulumi:"masterSectionId"`
	// The name of the section.
	Name *string `pulumi:"name"`
	// `true` if supernets are only being shown in
	// the subnet listing.
	ShowSupernetOnly *bool `pulumi:"showSupernetOnly"`
	// `true` if VLANs are being shown in
	// the subnet listing for this section.
	ShowVlanInSubnetListing *bool `pulumi:"showVlanInSubnetListing"`
	// `true` if VRFs are being shown in
	// the subnet listing for this section.
	ShowVrfInSubnetListing *bool `pulumi:"showVrfInSubnetListing"`
	// `true` if this subnet is set up to check that IP
	// addresses are valid for the subnets they are in.
	StrictMode *bool `pulumi:"strictMode"`
	// How subnets in this section are ordered.
	SubnetOrdering *string `pulumi:"subnetOrdering"`
}

// The set of arguments for constructing a Section resource.
type SectionArgs struct {
	// The section's description.
	Description pulumi.StringPtrInput
	// The section's display order number.
	DisplayOrder pulumi.IntPtrInput
	// The ID of the DNS resolver to use in the
	// section.
	DnsResolverId pulumi.IntPtrInput
	// The ID of the parent section in the PHPIPAM
	// database.
	MasterSectionId pulumi.IntPtrInput
	// The name of the section.
	Name pulumi.StringPtrInput
	// `true` if supernets are only being shown in
	// the subnet listing.
	ShowSupernetOnly pulumi.BoolPtrInput
	// `true` if VLANs are being shown in
	// the subnet listing for this section.
	ShowVlanInSubnetListing pulumi.BoolPtrInput
	// `true` if VRFs are being shown in
	// the subnet listing for this section.
	ShowVrfInSubnetListing pulumi.BoolPtrInput
	// `true` if this subnet is set up to check that IP
	// addresses are valid for the subnets they are in.
	StrictMode pulumi.BoolPtrInput
	// How subnets in this section are ordered.
	SubnetOrdering pulumi.StringPtrInput
}

func (SectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sectionArgs)(nil)).Elem()
}

type SectionInput interface {
	pulumi.Input

	ToSectionOutput() SectionOutput
	ToSectionOutputWithContext(ctx context.Context) SectionOutput
}

func (*Section) ElementType() reflect.Type {
	return reflect.TypeOf((**Section)(nil)).Elem()
}

func (i *Section) ToSectionOutput() SectionOutput {
	return i.ToSectionOutputWithContext(context.Background())
}

func (i *Section) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionOutput)
}

// SectionArrayInput is an input type that accepts SectionArray and SectionArrayOutput values.
// You can construct a concrete instance of `SectionArrayInput` via:
//
//	SectionArray{ SectionArgs{...} }
type SectionArrayInput interface {
	pulumi.Input

	ToSectionArrayOutput() SectionArrayOutput
	ToSectionArrayOutputWithContext(context.Context) SectionArrayOutput
}

type SectionArray []SectionInput

func (SectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Section)(nil)).Elem()
}

func (i SectionArray) ToSectionArrayOutput() SectionArrayOutput {
	return i.ToSectionArrayOutputWithContext(context.Background())
}

func (i SectionArray) ToSectionArrayOutputWithContext(ctx context.Context) SectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionArrayOutput)
}

// SectionMapInput is an input type that accepts SectionMap and SectionMapOutput values.
// You can construct a concrete instance of `SectionMapInput` via:
//
//	SectionMap{ "key": SectionArgs{...} }
type SectionMapInput interface {
	pulumi.Input

	ToSectionMapOutput() SectionMapOutput
	ToSectionMapOutputWithContext(context.Context) SectionMapOutput
}

type SectionMap map[string]SectionInput

func (SectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Section)(nil)).Elem()
}

func (i SectionMap) ToSectionMapOutput() SectionMapOutput {
	return i.ToSectionMapOutputWithContext(context.Background())
}

func (i SectionMap) ToSectionMapOutputWithContext(ctx context.Context) SectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SectionMapOutput)
}

type SectionOutput struct{ *pulumi.OutputState }

func (SectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Section)(nil)).Elem()
}

func (o SectionOutput) ToSectionOutput() SectionOutput {
	return o
}

func (o SectionOutput) ToSectionOutputWithContext(ctx context.Context) SectionOutput {
	return o
}

// The section's description.
func (o SectionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Section) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The section's display order number.
func (o SectionOutput) DisplayOrder() pulumi.IntOutput {
	return o.ApplyT(func(v *Section) pulumi.IntOutput { return v.DisplayOrder }).(pulumi.IntOutput)
}

// The ID of the DNS resolver to use in the
// section.
func (o SectionOutput) DnsResolverId() pulumi.IntOutput {
	return o.ApplyT(func(v *Section) pulumi.IntOutput { return v.DnsResolverId }).(pulumi.IntOutput)
}

// The date this resource was last edited.
func (o SectionOutput) EditDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Section) pulumi.StringOutput { return v.EditDate }).(pulumi.StringOutput)
}

// The ID of the parent section in the PHPIPAM
// database.
func (o SectionOutput) MasterSectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *Section) pulumi.IntOutput { return v.MasterSectionId }).(pulumi.IntOutput)
}

// The name of the section.
func (o SectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Section) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SectionOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v *Section) pulumi.StringOutput { return v.Permissions }).(pulumi.StringOutput)
}

// The ID of the section in the PHPIPAM database.
func (o SectionOutput) SectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *Section) pulumi.IntOutput { return v.SectionId }).(pulumi.IntOutput)
}

// `true` if supernets are only being shown in
// the subnet listing.
func (o SectionOutput) ShowSupernetOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *Section) pulumi.BoolOutput { return v.ShowSupernetOnly }).(pulumi.BoolOutput)
}

// `true` if VLANs are being shown in
// the subnet listing for this section.
func (o SectionOutput) ShowVlanInSubnetListing() pulumi.BoolOutput {
	return o.ApplyT(func(v *Section) pulumi.BoolOutput { return v.ShowVlanInSubnetListing }).(pulumi.BoolOutput)
}

// `true` if VRFs are being shown in
// the subnet listing for this section.
func (o SectionOutput) ShowVrfInSubnetListing() pulumi.BoolOutput {
	return o.ApplyT(func(v *Section) pulumi.BoolOutput { return v.ShowVrfInSubnetListing }).(pulumi.BoolOutput)
}

// `true` if this subnet is set up to check that IP
// addresses are valid for the subnets they are in.
func (o SectionOutput) StrictMode() pulumi.BoolOutput {
	return o.ApplyT(func(v *Section) pulumi.BoolOutput { return v.StrictMode }).(pulumi.BoolOutput)
}

// How subnets in this section are ordered.
func (o SectionOutput) SubnetOrdering() pulumi.StringOutput {
	return o.ApplyT(func(v *Section) pulumi.StringOutput { return v.SubnetOrdering }).(pulumi.StringOutput)
}

type SectionArrayOutput struct{ *pulumi.OutputState }

func (SectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Section)(nil)).Elem()
}

func (o SectionArrayOutput) ToSectionArrayOutput() SectionArrayOutput {
	return o
}

func (o SectionArrayOutput) ToSectionArrayOutputWithContext(ctx context.Context) SectionArrayOutput {
	return o
}

func (o SectionArrayOutput) Index(i pulumi.IntInput) SectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Section {
		return vs[0].([]*Section)[vs[1].(int)]
	}).(SectionOutput)
}

type SectionMapOutput struct{ *pulumi.OutputState }

func (SectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Section)(nil)).Elem()
}

func (o SectionMapOutput) ToSectionMapOutput() SectionMapOutput {
	return o
}

func (o SectionMapOutput) ToSectionMapOutputWithContext(ctx context.Context) SectionMapOutput {
	return o
}

func (o SectionMapOutput) MapIndex(k pulumi.StringInput) SectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Section {
		return vs[0].(map[string]*Section)[vs[1].(string)]
	}).(SectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SectionInput)(nil)).Elem(), &Section{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionArrayInput)(nil)).Elem(), SectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SectionMapInput)(nil)).Elem(), SectionMap{})
	pulumi.RegisterOutputType(SectionOutput{})
	pulumi.RegisterOutputType(SectionArrayOutput{})
	pulumi.RegisterOutputType(SectionMapOutput{})
}
