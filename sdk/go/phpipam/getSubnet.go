// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Subnet
//
// The `Subnet` data source gets information on a subnet such as its ID
// (required for creating addresses), description, and more.
//
// **Example:**
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subnet, err := phpipam.LookupSubnet(ctx, &phpipam.LookupSubnetArgs{
//				SubnetAddress: pulumi.StringRef("10.10.2.0"),
//				SubnetMask:    pulumi.IntRef(24),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Reserve the address.
//			_, err = phpipam.NewAddress(ctx, "newip", &phpipam.AddressArgs{
//				SubnetId:    pulumi.Int(subnet.SubnetId),
//				IpAddress:   pulumi.String("10.10.2.10"),
//				Hostname:    pulumi.String("tf-test-host.example.internal"),
//				Description: pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// **Example with `descriptionMatch`:**
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subnet, err := phpipam.LookupSubnet(ctx, &phpipam.LookupSubnetArgs{
//				SectionId:        pulumi.IntRef(1),
//				DescriptionMatch: pulumi.StringRef("[Cc]ustomer 2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			nextAddress, err := phpipam.LookupFirstFreeAddress(ctx, &phpipam.LookupFirstFreeAddressArgs{
//				SubnetId: subnet.SubnetId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Reserve the address. Note that we use ignore_changes here to ensure that we
//			// don't end up re-allocating this address on future Terraform runs.
//			_, err = phpipam.NewAddress(ctx, "newip", &phpipam.AddressArgs{
//				SubnetId:    pulumi.Int(subnet.SubnetId),
//				IpAddress:   pulumi.String(nextAddress.IpAddress),
//				Hostname:    pulumi.String("tf-test-host.example.internal"),
//				Description: pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// **Example With `customFieldFilter`:**
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subnet, err := phpipam.LookupSubnet(ctx, &phpipam.LookupSubnetArgs{
//				SectionId: pulumi.IntRef(1),
//				CustomFieldFilter: map[string]interface{}{
//					"custom_CustomTestSubnets": ".*terraform.*",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			nextAddress, err := phpipam.LookupFirstFreeAddress(ctx, &phpipam.LookupFirstFreeAddressArgs{
//				SubnetId: subnet.SubnetId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Reserve the address. Note that we use ignore_changes here to ensure that we
//			// don't end up re-allocating this address on future Terraform runs.
//			_, err = phpipam.NewAddress(ctx, "newip", &phpipam.AddressArgs{
//				SubnetId:    pulumi.Int(subnet.SubnetId),
//				IpAddress:   pulumi.String(nextAddress.IpAddress),
//				Hostname:    pulumi.String("tf-test-host.example.internal"),
//				Description: pulumi.String("Managed by Terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// **Example how to get gateway IP address by subnet_id:**
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			section, err := phpipam.LookupSection(ctx, &phpipam.LookupSectionArgs{
//				Name: pulumi.StringRef("Subnet Section"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			subnet, err := phpipam.LookupSubnet(ctx, &phpipam.LookupSubnetArgs{
//				SectionId:        pulumi.IntRef(section.Id),
//				DescriptionMatch: pulumi.StringRef("prod_mgmt"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = phpipam.LookupAddress(ctx, &phpipam.LookupAddressArgs{
//				AddressId: pulumi.IntRef(subnet.GatewayId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("phpipam:index/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// A map of custom fields to search for. The filter
	// values are regular expressions that follow the RE2 syntax for which you can
	// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
	// fields need to match for the match to succeed.
	//
	// ⚠️  **NOTE:** Searches with the `description`, `descriptionMatch` and
	// `customFieldFilter` fields return the first match found without any warnings.
	// Conversely, the resource fails if it somehow finds multiple results on a CIDR
	// (subnet and mask) search - this is to assert that you are getting the subnet you
	// requested. If you want to return multiple results, combine this data source with
	// the `getSubnets` data source. Custom fileds must contain
	// mandatory prefix `custom_`.
	//
	// ⚠️  **NOTE:** An empty or unspecified `customFieldFilter` value is the
	// equivalent to a regular expression that matches everything, and hence will
	// return the first subnetit sees in the section.
	//
	// Arguments are processed in the following order of precedence:
	CustomFieldFilter map[string]interface{} `pulumi:"customFieldFilter"`
	// The subnet's description. `sectionId` is required if you
	// want to use this option.
	Description *string `pulumi:"description"`
	// A regular expression to match against when searching
	// for a subnet. `sectionId` is required if you want to use this option.
	DescriptionMatch *string `pulumi:"descriptionMatch"`
	// , and either one of `description`, `descriptionMatch`, or
	// `customFieldFilter`
	SectionId *int `pulumi:"sectionId"`
	// and `subnetMask`
	SubnetAddress *string `pulumi:"subnetAddress"`
	SubnetId      *int    `pulumi:"subnetId"`
	// The subnet mask, in bits, of the subnet to look up.
	SubnetMask *int `pulumi:"subnetMask"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	// `true` if the subnet allows IP requests in PHPIPAM.
	AllowIpRequests bool `pulumi:"allowIpRequests"`
	// `true` if PTR records are created for addresses in
	// this subnet.
	CreatePtrRecords  bool                   `pulumi:"createPtrRecords"`
	CustomFieldFilter map[string]interface{} `pulumi:"customFieldFilter"`
	// A key/value map of custom fields for this subnet.
	CustomFields map[string]interface{} `pulumi:"customFields"`
	// The description set for the subnet.
	Description      string  `pulumi:"description"`
	DescriptionMatch *string `pulumi:"descriptionMatch"`
	// `true` if hostnames are displayed instead of IP
	// addresses in the address listing for this subnet.
	DisplayHostnames bool `pulumi:"displayHostnames"`
	// The date this resource was last updated.
	EditDate string `pulumi:"editDate"`
	// Key map of values: ip_addr, id. ipAddr - this is gateway IP address
	// (like 192.168.1.254). id - gateway ip ID
	Gateway map[string]interface{} `pulumi:"gateway"`
	// The ID of gateway IP address fot this subnet
	GatewayId string `pulumi:"gatewayId"`
	// `true` if this subnet is included in new host
	// scans.
	HostDiscoveryEnabled bool `pulumi:"hostDiscoveryEnabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// `true` if this subnet is included in ping probes.
	IncludeInPing bool `pulumi:"includeInPing"`
	// `true` if this subnet is a folder and not an actual subnet.
	IsFolder bool `pulumi:"isFolder"`
	// `true` if the subnet has been marked as full.
	IsFull bool `pulumi:"isFull"`
	// The ID of the linked subnet in the PHPIPAM database.
	LinkedSubnetId int `pulumi:"linkedSubnetId"`
	// The ID of the location for this subnet.
	LocationId int `pulumi:"locationId"`
	// The ID of the parent subnet for this subnet in the
	// PHPIPAM database.
	MasterSubnetId int `pulumi:"masterSubnetId"`
	// The ID of the nameserver used to assign PTR records for
	// this subnet.
	NameserverId   int                    `pulumi:"nameserverId"`
	Nameservers    map[string]interface{} `pulumi:"nameservers"`
	ParentSubnetId int                    `pulumi:"parentSubnetId"`
	// A JSON representation of the permissions associated with this
	// subnet.
	Permissions string `pulumi:"permissions"`
	// `true` if enabled resolving of DNS names.
	ResolveDns bool `pulumi:"resolveDns"`
	// The ID of the ping scan agent that is used for this subnet.
	ScanAgentId int `pulumi:"scanAgentId"`
	// The ID of the section for this address in the PHPIPAM
	// database.
	SectionId int `pulumi:"sectionId"`
	// `true` if the subnet name is are shown in the section, instead
	// of the network address.
	ShowName bool `pulumi:"showName"`
	// The network address of the subnet.
	SubnetAddress string `pulumi:"subnetAddress"`
	// The ID of the subnet in the PHPIPAM database.
	SubnetId int `pulumi:"subnetId"`
	// The subnet mask, in bits.
	SubnetMask int `pulumi:"subnetMask"`
	// The subnet's utilization threshold.
	UtilizationThreshold int `pulumi:"utilizationThreshold"`
	// The ID of the VLAN for this subnet in the PHPIPAM database.
	VlanId int `pulumi:"vlanId"`
	// The ID of the VRF for this subnet in the PHPIPAM database.
	VrfId int `pulumi:"vrfId"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubnetResult, error) {
			args := v.(LookupSubnetArgs)
			r, err := LookupSubnet(ctx, &args, opts...)
			var s LookupSubnetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	// A map of custom fields to search for. The filter
	// values are regular expressions that follow the RE2 syntax for which you can
	// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
	// fields need to match for the match to succeed.
	//
	// ⚠️  **NOTE:** Searches with the `description`, `descriptionMatch` and
	// `customFieldFilter` fields return the first match found without any warnings.
	// Conversely, the resource fails if it somehow finds multiple results on a CIDR
	// (subnet and mask) search - this is to assert that you are getting the subnet you
	// requested. If you want to return multiple results, combine this data source with
	// the `getSubnets` data source. Custom fileds must contain
	// mandatory prefix `custom_`.
	//
	// ⚠️  **NOTE:** An empty or unspecified `customFieldFilter` value is the
	// equivalent to a regular expression that matches everything, and hence will
	// return the first subnetit sees in the section.
	//
	// Arguments are processed in the following order of precedence:
	CustomFieldFilter pulumi.MapInput `pulumi:"customFieldFilter"`
	// The subnet's description. `sectionId` is required if you
	// want to use this option.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A regular expression to match against when searching
	// for a subnet. `sectionId` is required if you want to use this option.
	DescriptionMatch pulumi.StringPtrInput `pulumi:"descriptionMatch"`
	// , and either one of `description`, `descriptionMatch`, or
	// `customFieldFilter`
	SectionId pulumi.IntPtrInput `pulumi:"sectionId"`
	// and `subnetMask`
	SubnetAddress pulumi.StringPtrInput `pulumi:"subnetAddress"`
	SubnetId      pulumi.IntPtrInput    `pulumi:"subnetId"`
	// The subnet mask, in bits, of the subnet to look up.
	SubnetMask pulumi.IntPtrInput `pulumi:"subnetMask"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

// `true` if the subnet allows IP requests in PHPIPAM.
func (o LookupSubnetResultOutput) AllowIpRequests() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.AllowIpRequests }).(pulumi.BoolOutput)
}

// `true` if PTR records are created for addresses in
// this subnet.
func (o LookupSubnetResultOutput) CreatePtrRecords() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.CreatePtrRecords }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) CustomFieldFilter() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]interface{} { return v.CustomFieldFilter }).(pulumi.MapOutput)
}

// A key/value map of custom fields for this subnet.
func (o LookupSubnetResultOutput) CustomFields() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]interface{} { return v.CustomFields }).(pulumi.MapOutput)
}

// The description set for the subnet.
func (o LookupSubnetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DescriptionMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetResult) *string { return v.DescriptionMatch }).(pulumi.StringPtrOutput)
}

// `true` if hostnames are displayed instead of IP
// addresses in the address listing for this subnet.
func (o LookupSubnetResultOutput) DisplayHostnames() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.DisplayHostnames }).(pulumi.BoolOutput)
}

// The date this resource was last updated.
func (o LookupSubnetResultOutput) EditDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.EditDate }).(pulumi.StringOutput)
}

// Key map of values: ip_addr, id. ipAddr - this is gateway IP address
// (like 192.168.1.254). id - gateway ip ID
func (o LookupSubnetResultOutput) Gateway() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]interface{} { return v.Gateway }).(pulumi.MapOutput)
}

// The ID of gateway IP address fot this subnet
func (o LookupSubnetResultOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.GatewayId }).(pulumi.StringOutput)
}

// `true` if this subnet is included in new host
// scans.
func (o LookupSubnetResultOutput) HostDiscoveryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.HostDiscoveryEnabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

// `true` if this subnet is included in ping probes.
func (o LookupSubnetResultOutput) IncludeInPing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.IncludeInPing }).(pulumi.BoolOutput)
}

// `true` if this subnet is a folder and not an actual subnet.
func (o LookupSubnetResultOutput) IsFolder() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.IsFolder }).(pulumi.BoolOutput)
}

// `true` if the subnet has been marked as full.
func (o LookupSubnetResultOutput) IsFull() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.IsFull }).(pulumi.BoolOutput)
}

// The ID of the linked subnet in the PHPIPAM database.
func (o LookupSubnetResultOutput) LinkedSubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.LinkedSubnetId }).(pulumi.IntOutput)
}

// The ID of the location for this subnet.
func (o LookupSubnetResultOutput) LocationId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.LocationId }).(pulumi.IntOutput)
}

// The ID of the parent subnet for this subnet in the
// PHPIPAM database.
func (o LookupSubnetResultOutput) MasterSubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.MasterSubnetId }).(pulumi.IntOutput)
}

// The ID of the nameserver used to assign PTR records for
// this subnet.
func (o LookupSubnetResultOutput) NameserverId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.NameserverId }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) Nameservers() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSubnetResult) map[string]interface{} { return v.Nameservers }).(pulumi.MapOutput)
}

func (o LookupSubnetResultOutput) ParentSubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.ParentSubnetId }).(pulumi.IntOutput)
}

// A JSON representation of the permissions associated with this
// subnet.
func (o LookupSubnetResultOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Permissions }).(pulumi.StringOutput)
}

// `true` if enabled resolving of DNS names.
func (o LookupSubnetResultOutput) ResolveDns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.ResolveDns }).(pulumi.BoolOutput)
}

// The ID of the ping scan agent that is used for this subnet.
func (o LookupSubnetResultOutput) ScanAgentId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.ScanAgentId }).(pulumi.IntOutput)
}

// The ID of the section for this address in the PHPIPAM
// database.
func (o LookupSubnetResultOutput) SectionId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.SectionId }).(pulumi.IntOutput)
}

// `true` if the subnet name is are shown in the section, instead
// of the network address.
func (o LookupSubnetResultOutput) ShowName() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.ShowName }).(pulumi.BoolOutput)
}

// The network address of the subnet.
func (o LookupSubnetResultOutput) SubnetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SubnetAddress }).(pulumi.StringOutput)
}

// The ID of the subnet in the PHPIPAM database.
func (o LookupSubnetResultOutput) SubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.SubnetId }).(pulumi.IntOutput)
}

// The subnet mask, in bits.
func (o LookupSubnetResultOutput) SubnetMask() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.SubnetMask }).(pulumi.IntOutput)
}

// The subnet's utilization threshold.
func (o LookupSubnetResultOutput) UtilizationThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.UtilizationThreshold }).(pulumi.IntOutput)
}

// The ID of the VLAN for this subnet in the PHPIPAM database.
func (o LookupSubnetResultOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.VlanId }).(pulumi.IntOutput)
}

// The ID of the VRF for this subnet in the PHPIPAM database.
func (o LookupSubnetResultOutput) VrfId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.VrfId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
