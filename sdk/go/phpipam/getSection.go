// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Section
//
// The `Section` data source allows one to look up a specific section,
// either by database ID or name. This data can then be used to manage other parts
// of PHPIPAM, such as in the event that the section name is known but not its ID,
// which is required for managing subnets.
//
// **Example:**
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			section, err := phpipam.LookupSection(ctx, &phpipam.LookupSectionArgs{
//				Name: pulumi.StringRef("Customers"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = phpipam.NewSubnet(ctx, "subnet", &phpipam.SubnetArgs{
//				SectionId:     pulumi.Int(section.SectionId),
//				SubnetAddress: pulumi.String("10.10.3.0"),
//				SubnetMask:    pulumi.Int(24),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupSection(ctx *pulumi.Context, args *LookupSectionArgs, opts ...pulumi.InvokeOption) (*LookupSectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSectionResult
	err := ctx.Invoke("phpipam:index/getSection:getSection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSection.
type LookupSectionArgs struct {
	// The name of the section to look up.
	//
	// One of `sectionId` or `name` must be supplied. If both are supplied,
	// `sectionId` is used.
	Name *string `pulumi:"name"`
	// The ID of the section to look up.
	SectionId *int `pulumi:"sectionId"`
}

// A collection of values returned by getSection.
type LookupSectionResult struct {
	// The section's description.
	Description string `pulumi:"description"`
	// The section's display order number.
	DisplayOrder int `pulumi:"displayOrder"`
	// The ID of the DNS resolver to use in the section.
	DnsResolverId int `pulumi:"dnsResolverId"`
	// The date this resource was last edited.
	EditDate string `pulumi:"editDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the parent section in the PHPIPAM database.
	MasterSectionId int `pulumi:"masterSectionId"`
	// The name of the section.
	Name string `pulumi:"name"`
	// A JSON representation of permissions for this section.
	Permissions string `pulumi:"permissions"`
	// The ID of the section in the PHPIPAM database.
	SectionId int `pulumi:"sectionId"`
	// `true` if supernets are only being shown in the subnet
	// listing.
	ShowSupernetOnly bool `pulumi:"showSupernetOnly"`
	// `true` if VLANs are being shown in the subnet
	// listing for this section.
	ShowVlanInSubnetListing bool `pulumi:"showVlanInSubnetListing"`
	// `true` if VRFs are being shown in the subnet
	// listing for this section.
	ShowVrfInSubnetListing bool `pulumi:"showVrfInSubnetListing"`
	// `true` if this subnet is set up to check that IP addresses
	// are valid for the subnets they are in.
	StrictMode bool `pulumi:"strictMode"`
	// How subnets in this section are ordered.
	SubnetOrdering string `pulumi:"subnetOrdering"`
}

func LookupSectionOutput(ctx *pulumi.Context, args LookupSectionOutputArgs, opts ...pulumi.InvokeOption) LookupSectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSectionResult, error) {
			args := v.(LookupSectionArgs)
			r, err := LookupSection(ctx, &args, opts...)
			var s LookupSectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSectionResultOutput)
}

// A collection of arguments for invoking getSection.
type LookupSectionOutputArgs struct {
	// The name of the section to look up.
	//
	// One of `sectionId` or `name` must be supplied. If both are supplied,
	// `sectionId` is used.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of the section to look up.
	SectionId pulumi.IntPtrInput `pulumi:"sectionId"`
}

func (LookupSectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSectionArgs)(nil)).Elem()
}

// A collection of values returned by getSection.
type LookupSectionResultOutput struct{ *pulumi.OutputState }

func (LookupSectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSectionResult)(nil)).Elem()
}

func (o LookupSectionResultOutput) ToLookupSectionResultOutput() LookupSectionResultOutput {
	return o
}

func (o LookupSectionResultOutput) ToLookupSectionResultOutputWithContext(ctx context.Context) LookupSectionResultOutput {
	return o
}

// The section's description.
func (o LookupSectionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSectionResult) string { return v.Description }).(pulumi.StringOutput)
}

// The section's display order number.
func (o LookupSectionResultOutput) DisplayOrder() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSectionResult) int { return v.DisplayOrder }).(pulumi.IntOutput)
}

// The ID of the DNS resolver to use in the section.
func (o LookupSectionResultOutput) DnsResolverId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSectionResult) int { return v.DnsResolverId }).(pulumi.IntOutput)
}

// The date this resource was last edited.
func (o LookupSectionResultOutput) EditDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSectionResult) string { return v.EditDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSectionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the parent section in the PHPIPAM database.
func (o LookupSectionResultOutput) MasterSectionId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSectionResult) int { return v.MasterSectionId }).(pulumi.IntOutput)
}

// The name of the section.
func (o LookupSectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// A JSON representation of permissions for this section.
func (o LookupSectionResultOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSectionResult) string { return v.Permissions }).(pulumi.StringOutput)
}

// The ID of the section in the PHPIPAM database.
func (o LookupSectionResultOutput) SectionId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSectionResult) int { return v.SectionId }).(pulumi.IntOutput)
}

// `true` if supernets are only being shown in the subnet
// listing.
func (o LookupSectionResultOutput) ShowSupernetOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSectionResult) bool { return v.ShowSupernetOnly }).(pulumi.BoolOutput)
}

// `true` if VLANs are being shown in the subnet
// listing for this section.
func (o LookupSectionResultOutput) ShowVlanInSubnetListing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSectionResult) bool { return v.ShowVlanInSubnetListing }).(pulumi.BoolOutput)
}

// `true` if VRFs are being shown in the subnet
// listing for this section.
func (o LookupSectionResultOutput) ShowVrfInSubnetListing() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSectionResult) bool { return v.ShowVrfInSubnetListing }).(pulumi.BoolOutput)
}

// `true` if this subnet is set up to check that IP addresses
// are valid for the subnets they are in.
func (o LookupSectionResultOutput) StrictMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSectionResult) bool { return v.StrictMode }).(pulumi.BoolOutput)
}

// How subnets in this section are ordered.
func (o LookupSectionResultOutput) SubnetOrdering() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSectionResult) string { return v.SubnetOrdering }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSectionResultOutput{})
}
