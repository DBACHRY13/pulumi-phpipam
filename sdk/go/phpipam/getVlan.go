// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Vlan
//
// The `Vlan` data source allows one to look up a VLAN in the PHPIPAM
// database. This can then be used to assign a VLAN to a subnet in the
// `Subnet` resource. It can also be used
// to gather other information on the VLAN.
//
// **Example:**
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			section, err := phpipam.LookupSection(ctx, &phpipam.LookupSectionArgs{
//				Name: pulumi.StringRef("Customers"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vlan, err := phpipam.LookupVlan(ctx, &phpipam.LookupVlanArgs{
//				Number: pulumi.IntRef(1000),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = phpipam.NewSubnet(ctx, "subnet", &phpipam.SubnetArgs{
//				SectionId:     pulumi.Int(section.SectionId),
//				SubnetAddress: pulumi.String("10.10.3.0"),
//				SubnetMask:    pulumi.Int(24),
//				VlanId:        pulumi.Int(vlan.VlanId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupVlan(ctx *pulumi.Context, args *LookupVlanArgs, opts ...pulumi.InvokeOption) (*LookupVlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVlanResult
	err := ctx.Invoke("phpipam:index/getVlan:getVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVlan.
type LookupVlanArgs struct {
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId *int `pulumi:"l2DomainId"`
	// The number of the VLAN to look up.
	//
	// One of `vlanId` or `number` must be supplied. If both are supplied,
	// `vlanId` is used.
	Number *int `pulumi:"number"`
	// The ID of the VLAN to look up. **NOTE:** this is the database ID,
	// not the VLAN number - if you need this, use the `number` parameter.
	VlanId *int `pulumi:"vlanId"`
}

// A collection of values returned by getVlan.
type LookupVlanResult struct {
	// A key/value map of custom fields for this VLAN.
	CustomFields map[string]interface{} `pulumi:"customFields"`
	// The description supplied to the VLAN.
	Description string `pulumi:"description"`
	// The date this resource was last updated.
	EditDate string `pulumi:"editDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId int `pulumi:"l2DomainId"`
	// The name/label of the VLAN.
	Name string `pulumi:"name"`
	// The number of the VLAN (the actual VLAN ID on your switch).
	Number int `pulumi:"number"`
	// The ID of the VLAN to look up. **NOTE:** this is the database ID,
	// not the VLAN number - if you need this, use the `number` parameter.
	VlanId int `pulumi:"vlanId"`
}

func LookupVlanOutput(ctx *pulumi.Context, args LookupVlanOutputArgs, opts ...pulumi.InvokeOption) LookupVlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVlanResult, error) {
			args := v.(LookupVlanArgs)
			r, err := LookupVlan(ctx, &args, opts...)
			var s LookupVlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVlanResultOutput)
}

// A collection of arguments for invoking getVlan.
type LookupVlanOutputArgs struct {
	// The layer 2 domain ID in the PHPIPAM database.
	L2DomainId pulumi.IntPtrInput `pulumi:"l2DomainId"`
	// The number of the VLAN to look up.
	//
	// One of `vlanId` or `number` must be supplied. If both are supplied,
	// `vlanId` is used.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The ID of the VLAN to look up. **NOTE:** this is the database ID,
	// not the VLAN number - if you need this, use the `number` parameter.
	VlanId pulumi.IntPtrInput `pulumi:"vlanId"`
}

func (LookupVlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanArgs)(nil)).Elem()
}

// A collection of values returned by getVlan.
type LookupVlanResultOutput struct{ *pulumi.OutputState }

func (LookupVlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanResult)(nil)).Elem()
}

func (o LookupVlanResultOutput) ToLookupVlanResultOutput() LookupVlanResultOutput {
	return o
}

func (o LookupVlanResultOutput) ToLookupVlanResultOutputWithContext(ctx context.Context) LookupVlanResultOutput {
	return o
}

// A key/value map of custom fields for this VLAN.
func (o LookupVlanResultOutput) CustomFields() pulumi.MapOutput {
	return o.ApplyT(func(v LookupVlanResult) map[string]interface{} { return v.CustomFields }).(pulumi.MapOutput)
}

// The description supplied to the VLAN.
func (o LookupVlanResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Description }).(pulumi.StringOutput)
}

// The date this resource was last updated.
func (o LookupVlanResultOutput) EditDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.EditDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// The layer 2 domain ID in the PHPIPAM database.
func (o LookupVlanResultOutput) L2DomainId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanResult) int { return v.L2DomainId }).(pulumi.IntOutput)
}

// The name/label of the VLAN.
func (o LookupVlanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of the VLAN (the actual VLAN ID on your switch).
func (o LookupVlanResultOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanResult) int { return v.Number }).(pulumi.IntOutput)
}

// The ID of the VLAN to look up. **NOTE:** this is the database ID,
// not the VLAN number - if you need this, use the `number` parameter.
func (o LookupVlanResultOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanResult) int { return v.VlanId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVlanResultOutput{})
}
