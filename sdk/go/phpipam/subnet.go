// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package phpipam

import (
	"context"
	"reflect"

	"errors"
	"github.com/DBACHRY13/pulumi-phpipam/sdk/go/phpipam/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	// `true` if the subnet allows IP requests in
	// PHPIPAM.
	AllowIpRequests pulumi.BoolOutput `pulumi:"allowIpRequests"`
	// `true` if PTR records are created for
	// addresses in this subnet.
	CreatePtrRecords pulumi.BoolOutput `pulumi:"createPtrRecords"`
	// A key/value map of custom fields for this
	// subnet.
	//
	// ⚠️  **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	// Custom fileds must contain mandatory prefix `custom_`.
	CustomFields pulumi.MapOutput `pulumi:"customFields"`
	// The description set for the subnet.
	Description pulumi.StringOutput `pulumi:"description"`
	// `true` if hostnames are displayed instead of
	// IP addresses in the address listing for this subnet.
	DisplayHostnames pulumi.BoolOutput `pulumi:"displayHostnames"`
	// The date this resource was last updated.
	EditDate  pulumi.StringOutput `pulumi:"editDate"`
	Gateway   pulumi.MapOutput    `pulumi:"gateway"`
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// `true` if this subnet is included in
	// new host scans.
	HostDiscoveryEnabled pulumi.BoolOutput `pulumi:"hostDiscoveryEnabled"`
	// `true` if this subnet is included in ping
	// probes.
	IncludeInPing pulumi.BoolOutput `pulumi:"includeInPing"`
	// `true` if this subnet is a folder and not an actual
	// subnet.
	IsFolder pulumi.BoolOutput `pulumi:"isFolder"`
	// `true` if the subnet has been marked as full.
	IsFull pulumi.BoolOutput `pulumi:"isFull"`
	// The ID of the linked subnet in the PHPIPAM
	// database.
	LinkedSubnetId pulumi.IntOutput `pulumi:"linkedSubnetId"`
	// The ID of the location for this subnet.
	LocationId pulumi.IntOutput `pulumi:"locationId"`
	// The ID of the parent subnet for this subnet
	// in the PHPIPAM database.
	MasterSubnetId pulumi.IntOutput `pulumi:"masterSubnetId"`
	// The ID of the nameserver used to assign PTR
	// records for this subnet.
	NameserverId   pulumi.IntOutput `pulumi:"nameserverId"`
	Nameservers    pulumi.MapOutput `pulumi:"nameservers"`
	ParentSubnetId pulumi.IntOutput `pulumi:"parentSubnetId"`
	// A JSON representation of the permissions associated with this
	// subnet.
	Permissions pulumi.StringOutput `pulumi:"permissions"`
	// `true` if enabled resolving of DNS names.
	ResolveDns pulumi.BoolOutput `pulumi:"resolveDns"`
	// The ID of the ping scan agent that is used for
	// this subnet.
	ScanAgentId pulumi.IntOutput `pulumi:"scanAgentId"`
	// The ID of the section for this address in the
	// PHPIPAM database.
	SectionId pulumi.IntOutput `pulumi:"sectionId"`
	// `true` if the subnet name is are shown in the
	// section, instead of the network address.
	ShowName pulumi.BoolOutput `pulumi:"showName"`
	// The network address of the subnet.
	SubnetAddress pulumi.StringOutput `pulumi:"subnetAddress"`
	// The ID of the subnet in the PHPIPAM database.
	SubnetId pulumi.IntOutput `pulumi:"subnetId"`
	// The subnet mask, in bits.
	SubnetMask pulumi.IntOutput `pulumi:"subnetMask"`
	// The subnet's utilization threshold.
	UtilizationThreshold pulumi.IntOutput `pulumi:"utilizationThreshold"`
	// The ID of the VLAN for this subnet in the PHPIPAM
	// database.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
	// The ID of the VRF for this subnet in the PHPIPAM
	// database.
	VrfId pulumi.IntOutput `pulumi:"vrfId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SectionId == nil {
		return nil, errors.New("invalid value for required argument 'SectionId'")
	}
	if args.SubnetAddress == nil {
		return nil, errors.New("invalid value for required argument 'SubnetAddress'")
	}
	if args.SubnetMask == nil {
		return nil, errors.New("invalid value for required argument 'SubnetMask'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("phpipam:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("phpipam:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// `true` if the subnet allows IP requests in
	// PHPIPAM.
	AllowIpRequests *bool `pulumi:"allowIpRequests"`
	// `true` if PTR records are created for
	// addresses in this subnet.
	CreatePtrRecords *bool `pulumi:"createPtrRecords"`
	// A key/value map of custom fields for this
	// subnet.
	//
	// ⚠️  **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	// Custom fileds must contain mandatory prefix `custom_`.
	CustomFields map[string]interface{} `pulumi:"customFields"`
	// The description set for the subnet.
	Description *string `pulumi:"description"`
	// `true` if hostnames are displayed instead of
	// IP addresses in the address listing for this subnet.
	DisplayHostnames *bool `pulumi:"displayHostnames"`
	// The date this resource was last updated.
	EditDate  *string                `pulumi:"editDate"`
	Gateway   map[string]interface{} `pulumi:"gateway"`
	GatewayId *string                `pulumi:"gatewayId"`
	// `true` if this subnet is included in
	// new host scans.
	HostDiscoveryEnabled *bool `pulumi:"hostDiscoveryEnabled"`
	// `true` if this subnet is included in ping
	// probes.
	IncludeInPing *bool `pulumi:"includeInPing"`
	// `true` if this subnet is a folder and not an actual
	// subnet.
	IsFolder *bool `pulumi:"isFolder"`
	// `true` if the subnet has been marked as full.
	IsFull *bool `pulumi:"isFull"`
	// The ID of the linked subnet in the PHPIPAM
	// database.
	LinkedSubnetId *int `pulumi:"linkedSubnetId"`
	// The ID of the location for this subnet.
	LocationId *int `pulumi:"locationId"`
	// The ID of the parent subnet for this subnet
	// in the PHPIPAM database.
	MasterSubnetId *int `pulumi:"masterSubnetId"`
	// The ID of the nameserver used to assign PTR
	// records for this subnet.
	NameserverId   *int                   `pulumi:"nameserverId"`
	Nameservers    map[string]interface{} `pulumi:"nameservers"`
	ParentSubnetId *int                   `pulumi:"parentSubnetId"`
	// A JSON representation of the permissions associated with this
	// subnet.
	Permissions *string `pulumi:"permissions"`
	// `true` if enabled resolving of DNS names.
	ResolveDns *bool `pulumi:"resolveDns"`
	// The ID of the ping scan agent that is used for
	// this subnet.
	ScanAgentId *int `pulumi:"scanAgentId"`
	// The ID of the section for this address in the
	// PHPIPAM database.
	SectionId *int `pulumi:"sectionId"`
	// `true` if the subnet name is are shown in the
	// section, instead of the network address.
	ShowName *bool `pulumi:"showName"`
	// The network address of the subnet.
	SubnetAddress *string `pulumi:"subnetAddress"`
	// The ID of the subnet in the PHPIPAM database.
	SubnetId *int `pulumi:"subnetId"`
	// The subnet mask, in bits.
	SubnetMask *int `pulumi:"subnetMask"`
	// The subnet's utilization threshold.
	UtilizationThreshold *int `pulumi:"utilizationThreshold"`
	// The ID of the VLAN for this subnet in the PHPIPAM
	// database.
	VlanId *int `pulumi:"vlanId"`
	// The ID of the VRF for this subnet in the PHPIPAM
	// database.
	VrfId *int `pulumi:"vrfId"`
}

type SubnetState struct {
	// `true` if the subnet allows IP requests in
	// PHPIPAM.
	AllowIpRequests pulumi.BoolPtrInput
	// `true` if PTR records are created for
	// addresses in this subnet.
	CreatePtrRecords pulumi.BoolPtrInput
	// A key/value map of custom fields for this
	// subnet.
	//
	// ⚠️  **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	// Custom fileds must contain mandatory prefix `custom_`.
	CustomFields pulumi.MapInput
	// The description set for the subnet.
	Description pulumi.StringPtrInput
	// `true` if hostnames are displayed instead of
	// IP addresses in the address listing for this subnet.
	DisplayHostnames pulumi.BoolPtrInput
	// The date this resource was last updated.
	EditDate  pulumi.StringPtrInput
	Gateway   pulumi.MapInput
	GatewayId pulumi.StringPtrInput
	// `true` if this subnet is included in
	// new host scans.
	HostDiscoveryEnabled pulumi.BoolPtrInput
	// `true` if this subnet is included in ping
	// probes.
	IncludeInPing pulumi.BoolPtrInput
	// `true` if this subnet is a folder and not an actual
	// subnet.
	IsFolder pulumi.BoolPtrInput
	// `true` if the subnet has been marked as full.
	IsFull pulumi.BoolPtrInput
	// The ID of the linked subnet in the PHPIPAM
	// database.
	LinkedSubnetId pulumi.IntPtrInput
	// The ID of the location for this subnet.
	LocationId pulumi.IntPtrInput
	// The ID of the parent subnet for this subnet
	// in the PHPIPAM database.
	MasterSubnetId pulumi.IntPtrInput
	// The ID of the nameserver used to assign PTR
	// records for this subnet.
	NameserverId   pulumi.IntPtrInput
	Nameservers    pulumi.MapInput
	ParentSubnetId pulumi.IntPtrInput
	// A JSON representation of the permissions associated with this
	// subnet.
	Permissions pulumi.StringPtrInput
	// `true` if enabled resolving of DNS names.
	ResolveDns pulumi.BoolPtrInput
	// The ID of the ping scan agent that is used for
	// this subnet.
	ScanAgentId pulumi.IntPtrInput
	// The ID of the section for this address in the
	// PHPIPAM database.
	SectionId pulumi.IntPtrInput
	// `true` if the subnet name is are shown in the
	// section, instead of the network address.
	ShowName pulumi.BoolPtrInput
	// The network address of the subnet.
	SubnetAddress pulumi.StringPtrInput
	// The ID of the subnet in the PHPIPAM database.
	SubnetId pulumi.IntPtrInput
	// The subnet mask, in bits.
	SubnetMask pulumi.IntPtrInput
	// The subnet's utilization threshold.
	UtilizationThreshold pulumi.IntPtrInput
	// The ID of the VLAN for this subnet in the PHPIPAM
	// database.
	VlanId pulumi.IntPtrInput
	// The ID of the VRF for this subnet in the PHPIPAM
	// database.
	VrfId pulumi.IntPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// `true` if the subnet allows IP requests in
	// PHPIPAM.
	AllowIpRequests *bool `pulumi:"allowIpRequests"`
	// `true` if PTR records are created for
	// addresses in this subnet.
	CreatePtrRecords *bool `pulumi:"createPtrRecords"`
	// A key/value map of custom fields for this
	// subnet.
	//
	// ⚠️  **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	// Custom fileds must contain mandatory prefix `custom_`.
	CustomFields map[string]interface{} `pulumi:"customFields"`
	// The description set for the subnet.
	Description *string `pulumi:"description"`
	// `true` if hostnames are displayed instead of
	// IP addresses in the address listing for this subnet.
	DisplayHostnames *bool `pulumi:"displayHostnames"`
	// `true` if this subnet is included in
	// new host scans.
	HostDiscoveryEnabled *bool `pulumi:"hostDiscoveryEnabled"`
	// `true` if this subnet is included in ping
	// probes.
	IncludeInPing *bool `pulumi:"includeInPing"`
	// `true` if this subnet is a folder and not an actual
	// subnet.
	IsFolder *bool `pulumi:"isFolder"`
	// `true` if the subnet has been marked as full.
	IsFull *bool `pulumi:"isFull"`
	// The ID of the linked subnet in the PHPIPAM
	// database.
	LinkedSubnetId *int `pulumi:"linkedSubnetId"`
	// The ID of the location for this subnet.
	LocationId *int `pulumi:"locationId"`
	// The ID of the parent subnet for this subnet
	// in the PHPIPAM database.
	MasterSubnetId *int `pulumi:"masterSubnetId"`
	// The ID of the nameserver used to assign PTR
	// records for this subnet.
	NameserverId *int `pulumi:"nameserverId"`
	// `true` if enabled resolving of DNS names.
	ResolveDns *bool `pulumi:"resolveDns"`
	// The ID of the ping scan agent that is used for
	// this subnet.
	ScanAgentId *int `pulumi:"scanAgentId"`
	// The ID of the section for this address in the
	// PHPIPAM database.
	SectionId int `pulumi:"sectionId"`
	// `true` if the subnet name is are shown in the
	// section, instead of the network address.
	ShowName *bool `pulumi:"showName"`
	// The network address of the subnet.
	SubnetAddress string `pulumi:"subnetAddress"`
	// The subnet mask, in bits.
	SubnetMask int `pulumi:"subnetMask"`
	// The subnet's utilization threshold.
	UtilizationThreshold *int `pulumi:"utilizationThreshold"`
	// The ID of the VLAN for this subnet in the PHPIPAM
	// database.
	VlanId *int `pulumi:"vlanId"`
	// The ID of the VRF for this subnet in the PHPIPAM
	// database.
	VrfId *int `pulumi:"vrfId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// `true` if the subnet allows IP requests in
	// PHPIPAM.
	AllowIpRequests pulumi.BoolPtrInput
	// `true` if PTR records are created for
	// addresses in this subnet.
	CreatePtrRecords pulumi.BoolPtrInput
	// A key/value map of custom fields for this
	// subnet.
	//
	// ⚠️  **NOTE on custom fields:** PHPIPAM installations with custom fields must have
	// all fields set to optional when using this plugin. For more info see
	// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
	// ensure that your fields also do not have default values, or ensure the default
	// is set in your TF configuration. Diff loops may happen otherwise!
	// Custom fileds must contain mandatory prefix `custom_`.
	CustomFields pulumi.MapInput
	// The description set for the subnet.
	Description pulumi.StringPtrInput
	// `true` if hostnames are displayed instead of
	// IP addresses in the address listing for this subnet.
	DisplayHostnames pulumi.BoolPtrInput
	// `true` if this subnet is included in
	// new host scans.
	HostDiscoveryEnabled pulumi.BoolPtrInput
	// `true` if this subnet is included in ping
	// probes.
	IncludeInPing pulumi.BoolPtrInput
	// `true` if this subnet is a folder and not an actual
	// subnet.
	IsFolder pulumi.BoolPtrInput
	// `true` if the subnet has been marked as full.
	IsFull pulumi.BoolPtrInput
	// The ID of the linked subnet in the PHPIPAM
	// database.
	LinkedSubnetId pulumi.IntPtrInput
	// The ID of the location for this subnet.
	LocationId pulumi.IntPtrInput
	// The ID of the parent subnet for this subnet
	// in the PHPIPAM database.
	MasterSubnetId pulumi.IntPtrInput
	// The ID of the nameserver used to assign PTR
	// records for this subnet.
	NameserverId pulumi.IntPtrInput
	// `true` if enabled resolving of DNS names.
	ResolveDns pulumi.BoolPtrInput
	// The ID of the ping scan agent that is used for
	// this subnet.
	ScanAgentId pulumi.IntPtrInput
	// The ID of the section for this address in the
	// PHPIPAM database.
	SectionId pulumi.IntInput
	// `true` if the subnet name is are shown in the
	// section, instead of the network address.
	ShowName pulumi.BoolPtrInput
	// The network address of the subnet.
	SubnetAddress pulumi.StringInput
	// The subnet mask, in bits.
	SubnetMask pulumi.IntInput
	// The subnet's utilization threshold.
	UtilizationThreshold pulumi.IntPtrInput
	// The ID of the VLAN for this subnet in the PHPIPAM
	// database.
	VlanId pulumi.IntPtrInput
	// The ID of the VRF for this subnet in the PHPIPAM
	// database.
	VrfId pulumi.IntPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// `true` if the subnet allows IP requests in
// PHPIPAM.
func (o SubnetOutput) AllowIpRequests() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.AllowIpRequests }).(pulumi.BoolOutput)
}

// `true` if PTR records are created for
// addresses in this subnet.
func (o SubnetOutput) CreatePtrRecords() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.CreatePtrRecords }).(pulumi.BoolOutput)
}

// A key/value map of custom fields for this
// subnet.
//
// ⚠️  **NOTE on custom fields:** PHPIPAM installations with custom fields must have
// all fields set to optional when using this plugin. For more info see
// [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
// ensure that your fields also do not have default values, or ensure the default
// is set in your TF configuration. Diff loops may happen otherwise!
// Custom fileds must contain mandatory prefix `custom_`.
func (o SubnetOutput) CustomFields() pulumi.MapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.MapOutput { return v.CustomFields }).(pulumi.MapOutput)
}

// The description set for the subnet.
func (o SubnetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// `true` if hostnames are displayed instead of
// IP addresses in the address listing for this subnet.
func (o SubnetOutput) DisplayHostnames() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.DisplayHostnames }).(pulumi.BoolOutput)
}

// The date this resource was last updated.
func (o SubnetOutput) EditDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.EditDate }).(pulumi.StringOutput)
}

func (o SubnetOutput) Gateway() pulumi.MapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.MapOutput { return v.Gateway }).(pulumi.MapOutput)
}

func (o SubnetOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// `true` if this subnet is included in
// new host scans.
func (o SubnetOutput) HostDiscoveryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.HostDiscoveryEnabled }).(pulumi.BoolOutput)
}

// `true` if this subnet is included in ping
// probes.
func (o SubnetOutput) IncludeInPing() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IncludeInPing }).(pulumi.BoolOutput)
}

// `true` if this subnet is a folder and not an actual
// subnet.
func (o SubnetOutput) IsFolder() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IsFolder }).(pulumi.BoolOutput)
}

// `true` if the subnet has been marked as full.
func (o SubnetOutput) IsFull() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IsFull }).(pulumi.BoolOutput)
}

// The ID of the linked subnet in the PHPIPAM
// database.
func (o SubnetOutput) LinkedSubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.LinkedSubnetId }).(pulumi.IntOutput)
}

// The ID of the location for this subnet.
func (o SubnetOutput) LocationId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.LocationId }).(pulumi.IntOutput)
}

// The ID of the parent subnet for this subnet
// in the PHPIPAM database.
func (o SubnetOutput) MasterSubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.MasterSubnetId }).(pulumi.IntOutput)
}

// The ID of the nameserver used to assign PTR
// records for this subnet.
func (o SubnetOutput) NameserverId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.NameserverId }).(pulumi.IntOutput)
}

func (o SubnetOutput) Nameservers() pulumi.MapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.MapOutput { return v.Nameservers }).(pulumi.MapOutput)
}

func (o SubnetOutput) ParentSubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.ParentSubnetId }).(pulumi.IntOutput)
}

// A JSON representation of the permissions associated with this
// subnet.
func (o SubnetOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Permissions }).(pulumi.StringOutput)
}

// `true` if enabled resolving of DNS names.
func (o SubnetOutput) ResolveDns() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.ResolveDns }).(pulumi.BoolOutput)
}

// The ID of the ping scan agent that is used for
// this subnet.
func (o SubnetOutput) ScanAgentId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.ScanAgentId }).(pulumi.IntOutput)
}

// The ID of the section for this address in the
// PHPIPAM database.
func (o SubnetOutput) SectionId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.SectionId }).(pulumi.IntOutput)
}

// `true` if the subnet name is are shown in the
// section, instead of the network address.
func (o SubnetOutput) ShowName() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.ShowName }).(pulumi.BoolOutput)
}

// The network address of the subnet.
func (o SubnetOutput) SubnetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetAddress }).(pulumi.StringOutput)
}

// The ID of the subnet in the PHPIPAM database.
func (o SubnetOutput) SubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.SubnetId }).(pulumi.IntOutput)
}

// The subnet mask, in bits.
func (o SubnetOutput) SubnetMask() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.SubnetMask }).(pulumi.IntOutput)
}

// The subnet's utilization threshold.
func (o SubnetOutput) UtilizationThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.UtilizationThreshold }).(pulumi.IntOutput)
}

// The ID of the VLAN for this subnet in the PHPIPAM
// database.
func (o SubnetOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

// The ID of the VRF for this subnet in the PHPIPAM
// database.
func (o SubnetOutput) VrfId() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.VrfId }).(pulumi.IntOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
