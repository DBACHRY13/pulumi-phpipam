// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # phpipam.Vlan
 *
 * The `phpipam.Vlan` data source allows one to look up a VLAN in the PHPIPAM
 * database. This can then be used to assign a VLAN to a subnet in the
 * `phpipam.Subnet` resource. It can also be used
 * to gather other information on the VLAN.
 *
 * **Example:**
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as phpipam from "@pulumi/phpipam";
 *
 * const section = phpipam.getSection({
 *     name: "Customers",
 * });
 * const vlan = phpipam.getVlan({
 *     number: 1000,
 * });
 * const subnet = new phpipam.Subnet("subnet", {
 *     sectionId: section.then(section => section.sectionId),
 *     subnetAddress: "10.10.3.0",
 *     subnetMask: 24,
 *     vlanId: vlan.then(vlan => vlan.vlanId),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getVlan(args?: GetVlanArgs, opts?: pulumi.InvokeOptions): Promise<GetVlanResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("phpipam:index/getVlan:getVlan", {
        "l2DomainId": args.l2DomainId,
        "number": args.number,
        "vlanId": args.vlanId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVlan.
 */
export interface GetVlanArgs {
    /**
     * The layer 2 domain ID in the PHPIPAM database.
     */
    l2DomainId?: number;
    /**
     * The number of the VLAN to look up.
     *
     * One of `vlanId` or `number` must be supplied. If both are supplied,
     * `vlanId` is used.
     */
    number?: number;
    /**
     * The ID of the VLAN to look up. **NOTE:** this is the database ID,
     * not the VLAN number - if you need this, use the `number` parameter.
     */
    vlanId?: number;
}

/**
 * A collection of values returned by getVlan.
 */
export interface GetVlanResult {
    /**
     * A key/value map of custom fields for this VLAN.
     */
    readonly customFields: {[key: string]: any};
    /**
     * The description supplied to the VLAN.
     */
    readonly description: string;
    /**
     * The date this resource was last updated.
     */
    readonly editDate: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The layer 2 domain ID in the PHPIPAM database.
     */
    readonly l2DomainId: number;
    /**
     * The name/label of the VLAN.
     */
    readonly name: string;
    /**
     * The number of the VLAN (the actual VLAN ID on your switch).
     */
    readonly number: number;
    /**
     * The ID of the VLAN to look up. **NOTE:** this is the database ID,
     * not the VLAN number - if you need this, use the `number` parameter.
     */
    readonly vlanId: number;
}
/**
 * ## # phpipam.Vlan
 *
 * The `phpipam.Vlan` data source allows one to look up a VLAN in the PHPIPAM
 * database. This can then be used to assign a VLAN to a subnet in the
 * `phpipam.Subnet` resource. It can also be used
 * to gather other information on the VLAN.
 *
 * **Example:**
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as phpipam from "@pulumi/phpipam";
 *
 * const section = phpipam.getSection({
 *     name: "Customers",
 * });
 * const vlan = phpipam.getVlan({
 *     number: 1000,
 * });
 * const subnet = new phpipam.Subnet("subnet", {
 *     sectionId: section.then(section => section.sectionId),
 *     subnetAddress: "10.10.3.0",
 *     subnetMask: 24,
 *     vlanId: vlan.then(vlan => vlan.vlanId),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getVlanOutput(args?: GetVlanOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVlanResult> {
    return pulumi.output(args).apply((a: any) => getVlan(a, opts))
}

/**
 * A collection of arguments for invoking getVlan.
 */
export interface GetVlanOutputArgs {
    /**
     * The layer 2 domain ID in the PHPIPAM database.
     */
    l2DomainId?: pulumi.Input<number>;
    /**
     * The number of the VLAN to look up.
     *
     * One of `vlanId` or `number` must be supplied. If both are supplied,
     * `vlanId` is used.
     */
    number?: pulumi.Input<number>;
    /**
     * The ID of the VLAN to look up. **NOTE:** this is the database ID,
     * not the VLAN number - if you need this, use the `number` parameter.
     */
    vlanId?: pulumi.Input<number>;
}
