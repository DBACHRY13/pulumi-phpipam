// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vlan extends pulumi.CustomResource {
    /**
     * Get an existing Vlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VlanState, opts?: pulumi.CustomResourceOptions): Vlan {
        return new Vlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'phpipam:index/vlan:Vlan';

    /**
     * Returns true if the given object is an instance of Vlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vlan.__pulumiType;
    }

    /**
     * A key/value map of custom fields for this
     * VLAN.
     *
     * ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
     * all fields set to optional when using this plugin. For more info see
     * [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
     * ensure that your fields also do not have default values, or ensure the default
     * is set in your TF configuration. Diff loops may happen otherwise!
     */
    public readonly customFields!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The description supplied to the VLAN.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The date this resource was last updated.
     */
    public /*out*/ readonly editDate!: pulumi.Output<string>;
    /**
     * The layer 2 domain ID in the PHPIPAM database.
     */
    public readonly l2DomainId!: pulumi.Output<number>;
    /**
     * The name/label of the VLAN.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of the VLAN (the actual VLAN ID on your switch).
     */
    public readonly number!: pulumi.Output<number>;
    /**
     * The ID of the VLAN to look up. **NOTE:** this is the database ID,
     * not the VLAN number - if you need this, use the `number` parameter.
     */
    public /*out*/ readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a Vlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VlanArgs | VlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VlanState | undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["editDate"] = state ? state.editDate : undefined;
            resourceInputs["l2DomainId"] = state ? state.l2DomainId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["number"] = state ? state.number : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as VlanArgs | undefined;
            if ((!args || args.number === undefined) && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["l2DomainId"] = args ? args.l2DomainId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["number"] = args ? args.number : undefined;
            resourceInputs["editDate"] = undefined /*out*/;
            resourceInputs["vlanId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vlan resources.
 */
export interface VlanState {
    /**
     * A key/value map of custom fields for this
     * VLAN.
     *
     * ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
     * all fields set to optional when using this plugin. For more info see
     * [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
     * ensure that your fields also do not have default values, or ensure the default
     * is set in your TF configuration. Diff loops may happen otherwise!
     */
    customFields?: pulumi.Input<{[key: string]: any}>;
    /**
     * The description supplied to the VLAN.
     */
    description?: pulumi.Input<string>;
    /**
     * The date this resource was last updated.
     */
    editDate?: pulumi.Input<string>;
    /**
     * The layer 2 domain ID in the PHPIPAM database.
     */
    l2DomainId?: pulumi.Input<number>;
    /**
     * The name/label of the VLAN.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of the VLAN (the actual VLAN ID on your switch).
     */
    number?: pulumi.Input<number>;
    /**
     * The ID of the VLAN to look up. **NOTE:** this is the database ID,
     * not the VLAN number - if you need this, use the `number` parameter.
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Vlan resource.
 */
export interface VlanArgs {
    /**
     * A key/value map of custom fields for this
     * VLAN.
     *
     * ⚠️ **NOTE on custom fields:** PHPIPAM installations with custom fields must have
     * all fields set to optional when using this plugin. For more info see
     * [here](https://github.com/phpipam/phpipam/issues/1073). Further to this, either
     * ensure that your fields also do not have default values, or ensure the default
     * is set in your TF configuration. Diff loops may happen otherwise!
     */
    customFields?: pulumi.Input<{[key: string]: any}>;
    /**
     * The description supplied to the VLAN.
     */
    description?: pulumi.Input<string>;
    /**
     * The layer 2 domain ID in the PHPIPAM database.
     */
    l2DomainId?: pulumi.Input<number>;
    /**
     * The name/label of the VLAN.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of the VLAN (the actual VLAN ID on your switch).
     */
    number: pulumi.Input<number>;
}
