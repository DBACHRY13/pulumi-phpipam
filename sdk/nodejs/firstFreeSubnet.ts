// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirstFreeSubnet extends pulumi.CustomResource {
    /**
     * Get an existing FirstFreeSubnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirstFreeSubnetState, opts?: pulumi.CustomResourceOptions): FirstFreeSubnet {
        return new FirstFreeSubnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'phpipam:index/firstFreeSubnet:FirstFreeSubnet';

    /**
     * Returns true if the given object is an instance of FirstFreeSubnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirstFreeSubnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirstFreeSubnet.__pulumiType;
    }

    public readonly allowIpRequests!: pulumi.Output<boolean>;
    public readonly createPtrRecords!: pulumi.Output<boolean>;
    public readonly customFields!: pulumi.Output<{[key: string]: any}>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayHostnames!: pulumi.Output<boolean>;
    public /*out*/ readonly editDate!: pulumi.Output<string>;
    public /*out*/ readonly gateway!: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly gatewayId!: pulumi.Output<string>;
    public readonly hostDiscoveryEnabled!: pulumi.Output<boolean>;
    public readonly includeInPing!: pulumi.Output<boolean>;
    public readonly isFolder!: pulumi.Output<boolean>;
    public readonly isFull!: pulumi.Output<boolean>;
    public readonly linkedSubnetId!: pulumi.Output<number>;
    public readonly locationId!: pulumi.Output<number>;
    public readonly masterSubnetId!: pulumi.Output<number>;
    public readonly nameserverId!: pulumi.Output<number>;
    public /*out*/ readonly nameservers!: pulumi.Output<{[key: string]: any}>;
    public readonly parentSubnetId!: pulumi.Output<number>;
    public /*out*/ readonly permissions!: pulumi.Output<string>;
    public readonly resolveDns!: pulumi.Output<boolean>;
    public readonly scanAgentId!: pulumi.Output<number>;
    public readonly sectionId!: pulumi.Output<number>;
    public readonly showName!: pulumi.Output<boolean>;
    public /*out*/ readonly subnetAddress!: pulumi.Output<string>;
    public /*out*/ readonly subnetId!: pulumi.Output<number>;
    public readonly subnetMask!: pulumi.Output<number>;
    public readonly utilizationThreshold!: pulumi.Output<number>;
    public readonly vlanId!: pulumi.Output<number>;
    public readonly vrfId!: pulumi.Output<number>;

    /**
     * Create a FirstFreeSubnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirstFreeSubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirstFreeSubnetArgs | FirstFreeSubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirstFreeSubnetState | undefined;
            resourceInputs["allowIpRequests"] = state ? state.allowIpRequests : undefined;
            resourceInputs["createPtrRecords"] = state ? state.createPtrRecords : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayHostnames"] = state ? state.displayHostnames : undefined;
            resourceInputs["editDate"] = state ? state.editDate : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["hostDiscoveryEnabled"] = state ? state.hostDiscoveryEnabled : undefined;
            resourceInputs["includeInPing"] = state ? state.includeInPing : undefined;
            resourceInputs["isFolder"] = state ? state.isFolder : undefined;
            resourceInputs["isFull"] = state ? state.isFull : undefined;
            resourceInputs["linkedSubnetId"] = state ? state.linkedSubnetId : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["masterSubnetId"] = state ? state.masterSubnetId : undefined;
            resourceInputs["nameserverId"] = state ? state.nameserverId : undefined;
            resourceInputs["nameservers"] = state ? state.nameservers : undefined;
            resourceInputs["parentSubnetId"] = state ? state.parentSubnetId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["resolveDns"] = state ? state.resolveDns : undefined;
            resourceInputs["scanAgentId"] = state ? state.scanAgentId : undefined;
            resourceInputs["sectionId"] = state ? state.sectionId : undefined;
            resourceInputs["showName"] = state ? state.showName : undefined;
            resourceInputs["subnetAddress"] = state ? state.subnetAddress : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["subnetMask"] = state ? state.subnetMask : undefined;
            resourceInputs["utilizationThreshold"] = state ? state.utilizationThreshold : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["vrfId"] = state ? state.vrfId : undefined;
        } else {
            const args = argsOrState as FirstFreeSubnetArgs | undefined;
            if ((!args || args.parentSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentSubnetId'");
            }
            if ((!args || args.subnetMask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetMask'");
            }
            resourceInputs["allowIpRequests"] = args ? args.allowIpRequests : undefined;
            resourceInputs["createPtrRecords"] = args ? args.createPtrRecords : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayHostnames"] = args ? args.displayHostnames : undefined;
            resourceInputs["hostDiscoveryEnabled"] = args ? args.hostDiscoveryEnabled : undefined;
            resourceInputs["includeInPing"] = args ? args.includeInPing : undefined;
            resourceInputs["isFolder"] = args ? args.isFolder : undefined;
            resourceInputs["isFull"] = args ? args.isFull : undefined;
            resourceInputs["linkedSubnetId"] = args ? args.linkedSubnetId : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["masterSubnetId"] = args ? args.masterSubnetId : undefined;
            resourceInputs["nameserverId"] = args ? args.nameserverId : undefined;
            resourceInputs["parentSubnetId"] = args ? args.parentSubnetId : undefined;
            resourceInputs["resolveDns"] = args ? args.resolveDns : undefined;
            resourceInputs["scanAgentId"] = args ? args.scanAgentId : undefined;
            resourceInputs["sectionId"] = args ? args.sectionId : undefined;
            resourceInputs["showName"] = args ? args.showName : undefined;
            resourceInputs["subnetMask"] = args ? args.subnetMask : undefined;
            resourceInputs["utilizationThreshold"] = args ? args.utilizationThreshold : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["vrfId"] = args ? args.vrfId : undefined;
            resourceInputs["editDate"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["gatewayId"] = undefined /*out*/;
            resourceInputs["nameservers"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["subnetAddress"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirstFreeSubnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirstFreeSubnet resources.
 */
export interface FirstFreeSubnetState {
    allowIpRequests?: pulumi.Input<boolean>;
    createPtrRecords?: pulumi.Input<boolean>;
    customFields?: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    displayHostnames?: pulumi.Input<boolean>;
    editDate?: pulumi.Input<string>;
    gateway?: pulumi.Input<{[key: string]: any}>;
    gatewayId?: pulumi.Input<string>;
    hostDiscoveryEnabled?: pulumi.Input<boolean>;
    includeInPing?: pulumi.Input<boolean>;
    isFolder?: pulumi.Input<boolean>;
    isFull?: pulumi.Input<boolean>;
    linkedSubnetId?: pulumi.Input<number>;
    locationId?: pulumi.Input<number>;
    masterSubnetId?: pulumi.Input<number>;
    nameserverId?: pulumi.Input<number>;
    nameservers?: pulumi.Input<{[key: string]: any}>;
    parentSubnetId?: pulumi.Input<number>;
    permissions?: pulumi.Input<string>;
    resolveDns?: pulumi.Input<boolean>;
    scanAgentId?: pulumi.Input<number>;
    sectionId?: pulumi.Input<number>;
    showName?: pulumi.Input<boolean>;
    subnetAddress?: pulumi.Input<string>;
    subnetId?: pulumi.Input<number>;
    subnetMask?: pulumi.Input<number>;
    utilizationThreshold?: pulumi.Input<number>;
    vlanId?: pulumi.Input<number>;
    vrfId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FirstFreeSubnet resource.
 */
export interface FirstFreeSubnetArgs {
    allowIpRequests?: pulumi.Input<boolean>;
    createPtrRecords?: pulumi.Input<boolean>;
    customFields?: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    displayHostnames?: pulumi.Input<boolean>;
    hostDiscoveryEnabled?: pulumi.Input<boolean>;
    includeInPing?: pulumi.Input<boolean>;
    isFolder?: pulumi.Input<boolean>;
    isFull?: pulumi.Input<boolean>;
    linkedSubnetId?: pulumi.Input<number>;
    locationId?: pulumi.Input<number>;
    masterSubnetId?: pulumi.Input<number>;
    nameserverId?: pulumi.Input<number>;
    parentSubnetId: pulumi.Input<number>;
    resolveDns?: pulumi.Input<boolean>;
    scanAgentId?: pulumi.Input<number>;
    sectionId?: pulumi.Input<number>;
    showName?: pulumi.Input<boolean>;
    subnetMask: pulumi.Input<number>;
    utilizationThreshold?: pulumi.Input<number>;
    vlanId?: pulumi.Input<number>;
    vrfId?: pulumi.Input<number>;
}
