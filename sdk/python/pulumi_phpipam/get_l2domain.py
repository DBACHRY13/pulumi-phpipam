# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetL2domainResult',
    'AwaitableGetL2domainResult',
    'get_l2domain',
    'get_l2domain_output',
]

@pulumi.output_type
class GetL2domainResult:
    """
    A collection of values returned by getL2domain.
    """
    def __init__(__self__, description=None, domain_id=None, id=None, name=None, sections=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_id and not isinstance(domain_id, int):
            raise TypeError("Expected argument 'domain_id' to be a int")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sections and not isinstance(sections, str):
            raise TypeError("Expected argument 'sections' to be a str")
        pulumi.set(__self__, "sections", sections)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> int:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sections(self) -> str:
        return pulumi.get(self, "sections")


class AwaitableGetL2domainResult(GetL2domainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetL2domainResult(
            description=self.description,
            domain_id=self.domain_id,
            id=self.id,
            name=self.name,
            sections=self.sections)


def get_l2domain(domain_id: Optional[int] = None,
                 name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetL2domainResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domainId'] = domain_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('phpipam:index/getL2domain:getL2domain', __args__, opts=opts, typ=GetL2domainResult).value

    return AwaitableGetL2domainResult(
        description=pulumi.get(__ret__, 'description'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        sections=pulumi.get(__ret__, 'sections'))


@_utilities.lift_output_func(get_l2domain)
def get_l2domain_output(domain_id: Optional[pulumi.Input[Optional[int]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetL2domainResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
