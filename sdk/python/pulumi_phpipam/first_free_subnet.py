# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirstFreeSubnetArgs', 'FirstFreeSubnet']

@pulumi.input_type
class FirstFreeSubnetArgs:
    def __init__(__self__, *,
                 parent_subnet_id: pulumi.Input[int],
                 subnet_mask: pulumi.Input[int],
                 allow_ip_requests: Optional[pulumi.Input[bool]] = None,
                 create_ptr_records: Optional[pulumi.Input[bool]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_hostnames: Optional[pulumi.Input[bool]] = None,
                 host_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 include_in_ping: Optional[pulumi.Input[bool]] = None,
                 is_folder: Optional[pulumi.Input[bool]] = None,
                 is_full: Optional[pulumi.Input[bool]] = None,
                 linked_subnet_id: Optional[pulumi.Input[int]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 master_subnet_id: Optional[pulumi.Input[int]] = None,
                 nameserver_id: Optional[pulumi.Input[int]] = None,
                 resolve_dns: Optional[pulumi.Input[bool]] = None,
                 scan_agent_id: Optional[pulumi.Input[int]] = None,
                 section_id: Optional[pulumi.Input[int]] = None,
                 show_name: Optional[pulumi.Input[bool]] = None,
                 utilization_threshold: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a FirstFreeSubnet resource.
        """
        pulumi.set(__self__, "parent_subnet_id", parent_subnet_id)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        if allow_ip_requests is not None:
            pulumi.set(__self__, "allow_ip_requests", allow_ip_requests)
        if create_ptr_records is not None:
            pulumi.set(__self__, "create_ptr_records", create_ptr_records)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_hostnames is not None:
            pulumi.set(__self__, "display_hostnames", display_hostnames)
        if host_discovery_enabled is not None:
            pulumi.set(__self__, "host_discovery_enabled", host_discovery_enabled)
        if include_in_ping is not None:
            pulumi.set(__self__, "include_in_ping", include_in_ping)
        if is_folder is not None:
            pulumi.set(__self__, "is_folder", is_folder)
        if is_full is not None:
            pulumi.set(__self__, "is_full", is_full)
        if linked_subnet_id is not None:
            pulumi.set(__self__, "linked_subnet_id", linked_subnet_id)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if master_subnet_id is not None:
            pulumi.set(__self__, "master_subnet_id", master_subnet_id)
        if nameserver_id is not None:
            pulumi.set(__self__, "nameserver_id", nameserver_id)
        if resolve_dns is not None:
            pulumi.set(__self__, "resolve_dns", resolve_dns)
        if scan_agent_id is not None:
            pulumi.set(__self__, "scan_agent_id", scan_agent_id)
        if section_id is not None:
            pulumi.set(__self__, "section_id", section_id)
        if show_name is not None:
            pulumi.set(__self__, "show_name", show_name)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vrf_id is not None:
            pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter(name="parentSubnetId")
    def parent_subnet_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "parent_subnet_id")

    @parent_subnet_id.setter
    def parent_subnet_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "parent_subnet_id", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> pulumi.Input[int]:
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: pulumi.Input[int]):
        pulumi.set(self, "subnet_mask", value)

    @property
    @pulumi.getter(name="allowIpRequests")
    def allow_ip_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_ip_requests")

    @allow_ip_requests.setter
    def allow_ip_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ip_requests", value)

    @property
    @pulumi.getter(name="createPtrRecords")
    def create_ptr_records(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_ptr_records")

    @create_ptr_records.setter
    def create_ptr_records(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_ptr_records", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayHostnames")
    def display_hostnames(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "display_hostnames")

    @display_hostnames.setter
    def display_hostnames(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_hostnames", value)

    @property
    @pulumi.getter(name="hostDiscoveryEnabled")
    def host_discovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "host_discovery_enabled")

    @host_discovery_enabled.setter
    def host_discovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_discovery_enabled", value)

    @property
    @pulumi.getter(name="includeInPing")
    def include_in_ping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_in_ping")

    @include_in_ping.setter
    def include_in_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_in_ping", value)

    @property
    @pulumi.getter(name="isFolder")
    def is_folder(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_folder")

    @is_folder.setter
    def is_folder(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_folder", value)

    @property
    @pulumi.getter(name="isFull")
    def is_full(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_full")

    @is_full.setter
    def is_full(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_full", value)

    @property
    @pulumi.getter(name="linkedSubnetId")
    def linked_subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "linked_subnet_id")

    @linked_subnet_id.setter
    def linked_subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "linked_subnet_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="masterSubnetId")
    def master_subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "master_subnet_id")

    @master_subnet_id.setter
    def master_subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_subnet_id", value)

    @property
    @pulumi.getter(name="nameserverId")
    def nameserver_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nameserver_id")

    @nameserver_id.setter
    def nameserver_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nameserver_id", value)

    @property
    @pulumi.getter(name="resolveDns")
    def resolve_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "resolve_dns")

    @resolve_dns.setter
    def resolve_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_dns", value)

    @property
    @pulumi.getter(name="scanAgentId")
    def scan_agent_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scan_agent_id")

    @scan_agent_id.setter
    def scan_agent_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_agent_id", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="showName")
    def show_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_name")

    @show_name.setter
    def show_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_name", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "utilization_threshold", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf_id")

    @vrf_id.setter
    def vrf_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf_id", value)


@pulumi.input_type
class _FirstFreeSubnetState:
    def __init__(__self__, *,
                 allow_ip_requests: Optional[pulumi.Input[bool]] = None,
                 create_ptr_records: Optional[pulumi.Input[bool]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_hostnames: Optional[pulumi.Input[bool]] = None,
                 edit_date: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 host_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 include_in_ping: Optional[pulumi.Input[bool]] = None,
                 is_folder: Optional[pulumi.Input[bool]] = None,
                 is_full: Optional[pulumi.Input[bool]] = None,
                 linked_subnet_id: Optional[pulumi.Input[int]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 master_subnet_id: Optional[pulumi.Input[int]] = None,
                 nameserver_id: Optional[pulumi.Input[int]] = None,
                 nameservers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 parent_subnet_id: Optional[pulumi.Input[int]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 resolve_dns: Optional[pulumi.Input[bool]] = None,
                 scan_agent_id: Optional[pulumi.Input[int]] = None,
                 section_id: Optional[pulumi.Input[int]] = None,
                 show_name: Optional[pulumi.Input[bool]] = None,
                 subnet_address: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 subnet_mask: Optional[pulumi.Input[int]] = None,
                 utilization_threshold: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering FirstFreeSubnet resources.
        """
        if allow_ip_requests is not None:
            pulumi.set(__self__, "allow_ip_requests", allow_ip_requests)
        if create_ptr_records is not None:
            pulumi.set(__self__, "create_ptr_records", create_ptr_records)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_hostnames is not None:
            pulumi.set(__self__, "display_hostnames", display_hostnames)
        if edit_date is not None:
            pulumi.set(__self__, "edit_date", edit_date)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if host_discovery_enabled is not None:
            pulumi.set(__self__, "host_discovery_enabled", host_discovery_enabled)
        if include_in_ping is not None:
            pulumi.set(__self__, "include_in_ping", include_in_ping)
        if is_folder is not None:
            pulumi.set(__self__, "is_folder", is_folder)
        if is_full is not None:
            pulumi.set(__self__, "is_full", is_full)
        if linked_subnet_id is not None:
            pulumi.set(__self__, "linked_subnet_id", linked_subnet_id)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if master_subnet_id is not None:
            pulumi.set(__self__, "master_subnet_id", master_subnet_id)
        if nameserver_id is not None:
            pulumi.set(__self__, "nameserver_id", nameserver_id)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if parent_subnet_id is not None:
            pulumi.set(__self__, "parent_subnet_id", parent_subnet_id)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if resolve_dns is not None:
            pulumi.set(__self__, "resolve_dns", resolve_dns)
        if scan_agent_id is not None:
            pulumi.set(__self__, "scan_agent_id", scan_agent_id)
        if section_id is not None:
            pulumi.set(__self__, "section_id", section_id)
        if show_name is not None:
            pulumi.set(__self__, "show_name", show_name)
        if subnet_address is not None:
            pulumi.set(__self__, "subnet_address", subnet_address)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if utilization_threshold is not None:
            pulumi.set(__self__, "utilization_threshold", utilization_threshold)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vrf_id is not None:
            pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter(name="allowIpRequests")
    def allow_ip_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_ip_requests")

    @allow_ip_requests.setter
    def allow_ip_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ip_requests", value)

    @property
    @pulumi.getter(name="createPtrRecords")
    def create_ptr_records(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_ptr_records")

    @create_ptr_records.setter
    def create_ptr_records(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_ptr_records", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayHostnames")
    def display_hostnames(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "display_hostnames")

    @display_hostnames.setter
    def display_hostnames(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_hostnames", value)

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edit_date")

    @edit_date.setter
    def edit_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edit_date", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="hostDiscoveryEnabled")
    def host_discovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "host_discovery_enabled")

    @host_discovery_enabled.setter
    def host_discovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_discovery_enabled", value)

    @property
    @pulumi.getter(name="includeInPing")
    def include_in_ping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_in_ping")

    @include_in_ping.setter
    def include_in_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_in_ping", value)

    @property
    @pulumi.getter(name="isFolder")
    def is_folder(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_folder")

    @is_folder.setter
    def is_folder(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_folder", value)

    @property
    @pulumi.getter(name="isFull")
    def is_full(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_full")

    @is_full.setter
    def is_full(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_full", value)

    @property
    @pulumi.getter(name="linkedSubnetId")
    def linked_subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "linked_subnet_id")

    @linked_subnet_id.setter
    def linked_subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "linked_subnet_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="masterSubnetId")
    def master_subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "master_subnet_id")

    @master_subnet_id.setter
    def master_subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_subnet_id", value)

    @property
    @pulumi.getter(name="nameserverId")
    def nameserver_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nameserver_id")

    @nameserver_id.setter
    def nameserver_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nameserver_id", value)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter(name="parentSubnetId")
    def parent_subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "parent_subnet_id")

    @parent_subnet_id.setter
    def parent_subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_subnet_id", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="resolveDns")
    def resolve_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "resolve_dns")

    @resolve_dns.setter
    def resolve_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_dns", value)

    @property
    @pulumi.getter(name="scanAgentId")
    def scan_agent_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scan_agent_id")

    @scan_agent_id.setter
    def scan_agent_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_agent_id", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="showName")
    def show_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_name")

    @show_name.setter
    def show_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_name", value)

    @property
    @pulumi.getter(name="subnetAddress")
    def subnet_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_address")

    @subnet_address.setter
    def subnet_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_address", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_mask", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "utilization_threshold", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf_id")

    @vrf_id.setter
    def vrf_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf_id", value)


class FirstFreeSubnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ip_requests: Optional[pulumi.Input[bool]] = None,
                 create_ptr_records: Optional[pulumi.Input[bool]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_hostnames: Optional[pulumi.Input[bool]] = None,
                 host_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 include_in_ping: Optional[pulumi.Input[bool]] = None,
                 is_folder: Optional[pulumi.Input[bool]] = None,
                 is_full: Optional[pulumi.Input[bool]] = None,
                 linked_subnet_id: Optional[pulumi.Input[int]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 master_subnet_id: Optional[pulumi.Input[int]] = None,
                 nameserver_id: Optional[pulumi.Input[int]] = None,
                 parent_subnet_id: Optional[pulumi.Input[int]] = None,
                 resolve_dns: Optional[pulumi.Input[bool]] = None,
                 scan_agent_id: Optional[pulumi.Input[int]] = None,
                 section_id: Optional[pulumi.Input[int]] = None,
                 show_name: Optional[pulumi.Input[bool]] = None,
                 subnet_mask: Optional[pulumi.Input[int]] = None,
                 utilization_threshold: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a FirstFreeSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirstFreeSubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirstFreeSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirstFreeSubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirstFreeSubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ip_requests: Optional[pulumi.Input[bool]] = None,
                 create_ptr_records: Optional[pulumi.Input[bool]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_hostnames: Optional[pulumi.Input[bool]] = None,
                 host_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 include_in_ping: Optional[pulumi.Input[bool]] = None,
                 is_folder: Optional[pulumi.Input[bool]] = None,
                 is_full: Optional[pulumi.Input[bool]] = None,
                 linked_subnet_id: Optional[pulumi.Input[int]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 master_subnet_id: Optional[pulumi.Input[int]] = None,
                 nameserver_id: Optional[pulumi.Input[int]] = None,
                 parent_subnet_id: Optional[pulumi.Input[int]] = None,
                 resolve_dns: Optional[pulumi.Input[bool]] = None,
                 scan_agent_id: Optional[pulumi.Input[int]] = None,
                 section_id: Optional[pulumi.Input[int]] = None,
                 show_name: Optional[pulumi.Input[bool]] = None,
                 subnet_mask: Optional[pulumi.Input[int]] = None,
                 utilization_threshold: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirstFreeSubnetArgs.__new__(FirstFreeSubnetArgs)

            __props__.__dict__["allow_ip_requests"] = allow_ip_requests
            __props__.__dict__["create_ptr_records"] = create_ptr_records
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            __props__.__dict__["display_hostnames"] = display_hostnames
            __props__.__dict__["host_discovery_enabled"] = host_discovery_enabled
            __props__.__dict__["include_in_ping"] = include_in_ping
            __props__.__dict__["is_folder"] = is_folder
            __props__.__dict__["is_full"] = is_full
            __props__.__dict__["linked_subnet_id"] = linked_subnet_id
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["master_subnet_id"] = master_subnet_id
            __props__.__dict__["nameserver_id"] = nameserver_id
            if parent_subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_subnet_id'")
            __props__.__dict__["parent_subnet_id"] = parent_subnet_id
            __props__.__dict__["resolve_dns"] = resolve_dns
            __props__.__dict__["scan_agent_id"] = scan_agent_id
            __props__.__dict__["section_id"] = section_id
            __props__.__dict__["show_name"] = show_name
            if subnet_mask is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_mask'")
            __props__.__dict__["subnet_mask"] = subnet_mask
            __props__.__dict__["utilization_threshold"] = utilization_threshold
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["vrf_id"] = vrf_id
            __props__.__dict__["edit_date"] = None
            __props__.__dict__["gateway"] = None
            __props__.__dict__["gateway_id"] = None
            __props__.__dict__["nameservers"] = None
            __props__.__dict__["permissions"] = None
            __props__.__dict__["subnet_address"] = None
            __props__.__dict__["subnet_id"] = None
        super(FirstFreeSubnet, __self__).__init__(
            'phpipam:index/firstFreeSubnet:FirstFreeSubnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_ip_requests: Optional[pulumi.Input[bool]] = None,
            create_ptr_records: Optional[pulumi.Input[bool]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_hostnames: Optional[pulumi.Input[bool]] = None,
            edit_date: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            host_discovery_enabled: Optional[pulumi.Input[bool]] = None,
            include_in_ping: Optional[pulumi.Input[bool]] = None,
            is_folder: Optional[pulumi.Input[bool]] = None,
            is_full: Optional[pulumi.Input[bool]] = None,
            linked_subnet_id: Optional[pulumi.Input[int]] = None,
            location_id: Optional[pulumi.Input[int]] = None,
            master_subnet_id: Optional[pulumi.Input[int]] = None,
            nameserver_id: Optional[pulumi.Input[int]] = None,
            nameservers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            parent_subnet_id: Optional[pulumi.Input[int]] = None,
            permissions: Optional[pulumi.Input[str]] = None,
            resolve_dns: Optional[pulumi.Input[bool]] = None,
            scan_agent_id: Optional[pulumi.Input[int]] = None,
            section_id: Optional[pulumi.Input[int]] = None,
            show_name: Optional[pulumi.Input[bool]] = None,
            subnet_address: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[int]] = None,
            subnet_mask: Optional[pulumi.Input[int]] = None,
            utilization_threshold: Optional[pulumi.Input[int]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None,
            vrf_id: Optional[pulumi.Input[int]] = None) -> 'FirstFreeSubnet':
        """
        Get an existing FirstFreeSubnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirstFreeSubnetState.__new__(_FirstFreeSubnetState)

        __props__.__dict__["allow_ip_requests"] = allow_ip_requests
        __props__.__dict__["create_ptr_records"] = create_ptr_records
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["display_hostnames"] = display_hostnames
        __props__.__dict__["edit_date"] = edit_date
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["host_discovery_enabled"] = host_discovery_enabled
        __props__.__dict__["include_in_ping"] = include_in_ping
        __props__.__dict__["is_folder"] = is_folder
        __props__.__dict__["is_full"] = is_full
        __props__.__dict__["linked_subnet_id"] = linked_subnet_id
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["master_subnet_id"] = master_subnet_id
        __props__.__dict__["nameserver_id"] = nameserver_id
        __props__.__dict__["nameservers"] = nameservers
        __props__.__dict__["parent_subnet_id"] = parent_subnet_id
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["resolve_dns"] = resolve_dns
        __props__.__dict__["scan_agent_id"] = scan_agent_id
        __props__.__dict__["section_id"] = section_id
        __props__.__dict__["show_name"] = show_name
        __props__.__dict__["subnet_address"] = subnet_address
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["subnet_mask"] = subnet_mask
        __props__.__dict__["utilization_threshold"] = utilization_threshold
        __props__.__dict__["vlan_id"] = vlan_id
        __props__.__dict__["vrf_id"] = vrf_id
        return FirstFreeSubnet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowIpRequests")
    def allow_ip_requests(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "allow_ip_requests")

    @property
    @pulumi.getter(name="createPtrRecords")
    def create_ptr_records(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "create_ptr_records")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayHostnames")
    def display_hostnames(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "display_hostnames")

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "edit_date")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="hostDiscoveryEnabled")
    def host_discovery_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "host_discovery_enabled")

    @property
    @pulumi.getter(name="includeInPing")
    def include_in_ping(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "include_in_ping")

    @property
    @pulumi.getter(name="isFolder")
    def is_folder(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_folder")

    @property
    @pulumi.getter(name="isFull")
    def is_full(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_full")

    @property
    @pulumi.getter(name="linkedSubnetId")
    def linked_subnet_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "linked_subnet_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="masterSubnetId")
    def master_subnet_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "master_subnet_id")

    @property
    @pulumi.getter(name="nameserverId")
    def nameserver_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "nameserver_id")

    @property
    @pulumi.getter
    def nameservers(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter(name="parentSubnetId")
    def parent_subnet_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "parent_subnet_id")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="resolveDns")
    def resolve_dns(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "resolve_dns")

    @property
    @pulumi.getter(name="scanAgentId")
    def scan_agent_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "scan_agent_id")

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "section_id")

    @property
    @pulumi.getter(name="showName")
    def show_name(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "show_name")

    @property
    @pulumi.getter(name="subnetAddress")
    def subnet_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "subnet_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> pulumi.Output[int]:
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> pulumi.Output[int]:
        return pulumi.get(self, "utilization_threshold")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vrf_id")

