# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirstFreeAddressArgs', 'FirstFreeAddress']

@pulumi.input_type
class FirstFreeAddressArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[int],
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 exclude_ping: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 is_gateway: Optional[pulumi.Input[bool]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 ptr_record_id: Optional[pulumi.Input[int]] = None,
                 skip_ptr_record: Optional[pulumi.Input[bool]] = None,
                 state_tag_id: Optional[pulumi.Input[int]] = None,
                 switch_port_label: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FirstFreeAddress resource.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if exclude_ping is not None:
            pulumi.set(__self__, "exclude_ping", exclude_ping)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if is_gateway is not None:
            pulumi.set(__self__, "is_gateway", is_gateway)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if ptr_record_id is not None:
            pulumi.set(__self__, "ptr_record_id", ptr_record_id)
        if skip_ptr_record is not None:
            pulumi.set(__self__, "skip_ptr_record", skip_ptr_record)
        if state_tag_id is not None:
            pulumi.set(__self__, "state_tag_id", state_tag_id)
        if switch_port_label is not None:
            pulumi.set(__self__, "switch_port_label", switch_port_label)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="excludePing")
    def exclude_ping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_ping")

    @exclude_ping.setter
    def exclude_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_ping", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="isGateway")
    def is_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_gateway")

    @is_gateway.setter
    def is_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_gateway", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ptrRecordId")
    def ptr_record_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ptr_record_id")

    @ptr_record_id.setter
    def ptr_record_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptr_record_id", value)

    @property
    @pulumi.getter(name="skipPtrRecord")
    def skip_ptr_record(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_ptr_record")

    @skip_ptr_record.setter
    def skip_ptr_record(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_ptr_record", value)

    @property
    @pulumi.getter(name="stateTagId")
    def state_tag_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "state_tag_id")

    @state_tag_id.setter
    def state_tag_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state_tag_id", value)

    @property
    @pulumi.getter(name="switchPortLabel")
    def switch_port_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_port_label")

    @switch_port_label.setter
    def switch_port_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_port_label", value)


@pulumi.input_type
class _FirstFreeAddressState:
    def __init__(__self__, *,
                 address_id: Optional[pulumi.Input[int]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 edit_date: Optional[pulumi.Input[str]] = None,
                 exclude_ping: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 is_gateway: Optional[pulumi.Input[bool]] = None,
                 last_seen: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 ptr_record_id: Optional[pulumi.Input[int]] = None,
                 skip_ptr_record: Optional[pulumi.Input[bool]] = None,
                 state_tag_id: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 switch_port_label: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FirstFreeAddress resources.
        """
        if address_id is not None:
            pulumi.set(__self__, "address_id", address_id)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if edit_date is not None:
            pulumi.set(__self__, "edit_date", edit_date)
        if exclude_ping is not None:
            pulumi.set(__self__, "exclude_ping", exclude_ping)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if is_gateway is not None:
            pulumi.set(__self__, "is_gateway", is_gateway)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if ptr_record_id is not None:
            pulumi.set(__self__, "ptr_record_id", ptr_record_id)
        if skip_ptr_record is not None:
            pulumi.set(__self__, "skip_ptr_record", skip_ptr_record)
        if state_tag_id is not None:
            pulumi.set(__self__, "state_tag_id", state_tag_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if switch_port_label is not None:
            pulumi.set(__self__, "switch_port_label", switch_port_label)

    @property
    @pulumi.getter(name="addressId")
    def address_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "address_id")

    @address_id.setter
    def address_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "address_id", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "edit_date")

    @edit_date.setter
    def edit_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edit_date", value)

    @property
    @pulumi.getter(name="excludePing")
    def exclude_ping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_ping")

    @exclude_ping.setter
    def exclude_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_ping", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="isGateway")
    def is_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_gateway")

    @is_gateway.setter
    def is_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_gateway", value)

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_seen")

    @last_seen.setter
    def last_seen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_seen", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="ptrRecordId")
    def ptr_record_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ptr_record_id")

    @ptr_record_id.setter
    def ptr_record_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ptr_record_id", value)

    @property
    @pulumi.getter(name="skipPtrRecord")
    def skip_ptr_record(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_ptr_record")

    @skip_ptr_record.setter
    def skip_ptr_record(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_ptr_record", value)

    @property
    @pulumi.getter(name="stateTagId")
    def state_tag_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "state_tag_id")

    @state_tag_id.setter
    def state_tag_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state_tag_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="switchPortLabel")
    def switch_port_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_port_label")

    @switch_port_label.setter
    def switch_port_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_port_label", value)


class FirstFreeAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 exclude_ping: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 is_gateway: Optional[pulumi.Input[bool]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 ptr_record_id: Optional[pulumi.Input[int]] = None,
                 skip_ptr_record: Optional[pulumi.Input[bool]] = None,
                 state_tag_id: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 switch_port_label: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a FirstFreeAddress resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirstFreeAddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirstFreeAddress resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirstFreeAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirstFreeAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 exclude_ping: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 is_gateway: Optional[pulumi.Input[bool]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 ptr_record_id: Optional[pulumi.Input[int]] = None,
                 skip_ptr_record: Optional[pulumi.Input[bool]] = None,
                 state_tag_id: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[int]] = None,
                 switch_port_label: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirstFreeAddressArgs.__new__(FirstFreeAddressArgs)

            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["exclude_ping"] = exclude_ping
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["is_gateway"] = is_gateway
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["note"] = note
            __props__.__dict__["owner"] = owner
            __props__.__dict__["ptr_record_id"] = ptr_record_id
            __props__.__dict__["skip_ptr_record"] = skip_ptr_record
            __props__.__dict__["state_tag_id"] = state_tag_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["switch_port_label"] = switch_port_label
            __props__.__dict__["address_id"] = None
            __props__.__dict__["edit_date"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["last_seen"] = None
        super(FirstFreeAddress, __self__).__init__(
            'phpipam:index/firstFreeAddress:FirstFreeAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_id: Optional[pulumi.Input[int]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_id: Optional[pulumi.Input[int]] = None,
            edit_date: Optional[pulumi.Input[str]] = None,
            exclude_ping: Optional[pulumi.Input[bool]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            is_gateway: Optional[pulumi.Input[bool]] = None,
            last_seen: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            note: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            ptr_record_id: Optional[pulumi.Input[int]] = None,
            skip_ptr_record: Optional[pulumi.Input[bool]] = None,
            state_tag_id: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[int]] = None,
            switch_port_label: Optional[pulumi.Input[str]] = None) -> 'FirstFreeAddress':
        """
        Get an existing FirstFreeAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirstFreeAddressState.__new__(_FirstFreeAddressState)

        __props__.__dict__["address_id"] = address_id
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["edit_date"] = edit_date
        __props__.__dict__["exclude_ping"] = exclude_ping
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["is_gateway"] = is_gateway
        __props__.__dict__["last_seen"] = last_seen
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["note"] = note
        __props__.__dict__["owner"] = owner
        __props__.__dict__["ptr_record_id"] = ptr_record_id
        __props__.__dict__["skip_ptr_record"] = skip_ptr_record
        __props__.__dict__["state_tag_id"] = state_tag_id
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["switch_port_label"] = switch_port_label
        return FirstFreeAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressId")
    def address_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "address_id")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "edit_date")

    @property
    @pulumi.getter(name="excludePing")
    def exclude_ping(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "exclude_ping")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="isGateway")
    def is_gateway(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "is_gateway")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[str]:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="ptrRecordId")
    def ptr_record_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ptr_record_id")

    @property
    @pulumi.getter(name="skipPtrRecord")
    def skip_ptr_record(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "skip_ptr_record")

    @property
    @pulumi.getter(name="stateTagId")
    def state_tag_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "state_tag_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="switchPortLabel")
    def switch_port_label(self) -> pulumi.Output[str]:
        return pulumi.get(self, "switch_port_label")

