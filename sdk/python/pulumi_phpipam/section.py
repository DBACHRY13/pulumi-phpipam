# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SectionArgs', 'Section']

@pulumi.input_type
class SectionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 dns_resolver_id: Optional[pulumi.Input[int]] = None,
                 master_section_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 show_supernet_only: Optional[pulumi.Input[bool]] = None,
                 show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 strict_mode: Optional[pulumi.Input[bool]] = None,
                 subnet_ordering: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Section resource.
        :param pulumi.Input[str] description: The section's description.
        :param pulumi.Input[int] display_order: The section's display order number.
        :param pulumi.Input[int] dns_resolver_id: The ID of the DNS resolver to use in the
               section.
        :param pulumi.Input[int] master_section_id: The ID of the parent section in the PHPIPAM
               database.
        :param pulumi.Input[str] name: The name of the section.
        :param pulumi.Input[bool] show_supernet_only: `true` if supernets are only being shown in
               the subnet listing.
        :param pulumi.Input[bool] show_vlan_in_subnet_listing: `true` if VLANs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] show_vrf_in_subnet_listing: `true` if VRFs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] strict_mode: `true` if this subnet is set up to check that IP
               addresses are valid for the subnets they are in.
        :param pulumi.Input[str] subnet_ordering: How subnets in this section are ordered.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if dns_resolver_id is not None:
            pulumi.set(__self__, "dns_resolver_id", dns_resolver_id)
        if master_section_id is not None:
            pulumi.set(__self__, "master_section_id", master_section_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if show_supernet_only is not None:
            pulumi.set(__self__, "show_supernet_only", show_supernet_only)
        if show_vlan_in_subnet_listing is not None:
            pulumi.set(__self__, "show_vlan_in_subnet_listing", show_vlan_in_subnet_listing)
        if show_vrf_in_subnet_listing is not None:
            pulumi.set(__self__, "show_vrf_in_subnet_listing", show_vrf_in_subnet_listing)
        if strict_mode is not None:
            pulumi.set(__self__, "strict_mode", strict_mode)
        if subnet_ordering is not None:
            pulumi.set(__self__, "subnet_ordering", subnet_ordering)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The section's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[pulumi.Input[int]]:
        """
        The section's display order number.
        """
        return pulumi.get(self, "display_order")

    @display_order.setter
    def display_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "display_order", value)

    @property
    @pulumi.getter(name="dnsResolverId")
    def dns_resolver_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the DNS resolver to use in the
        section.
        """
        return pulumi.get(self, "dns_resolver_id")

    @dns_resolver_id.setter
    def dns_resolver_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_resolver_id", value)

    @property
    @pulumi.getter(name="masterSectionId")
    def master_section_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the parent section in the PHPIPAM
        database.
        """
        return pulumi.get(self, "master_section_id")

    @master_section_id.setter
    def master_section_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_section_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the section.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="showSupernetOnly")
    def show_supernet_only(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if supernets are only being shown in
        the subnet listing.
        """
        return pulumi.get(self, "show_supernet_only")

    @show_supernet_only.setter
    def show_supernet_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_supernet_only", value)

    @property
    @pulumi.getter(name="showVlanInSubnetListing")
    def show_vlan_in_subnet_listing(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if VLANs are being shown in
        the subnet listing for this section.
        """
        return pulumi.get(self, "show_vlan_in_subnet_listing")

    @show_vlan_in_subnet_listing.setter
    def show_vlan_in_subnet_listing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_vlan_in_subnet_listing", value)

    @property
    @pulumi.getter(name="showVrfInSubnetListing")
    def show_vrf_in_subnet_listing(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if VRFs are being shown in
        the subnet listing for this section.
        """
        return pulumi.get(self, "show_vrf_in_subnet_listing")

    @show_vrf_in_subnet_listing.setter
    def show_vrf_in_subnet_listing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_vrf_in_subnet_listing", value)

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if this subnet is set up to check that IP
        addresses are valid for the subnets they are in.
        """
        return pulumi.get(self, "strict_mode")

    @strict_mode.setter
    def strict_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_mode", value)

    @property
    @pulumi.getter(name="subnetOrdering")
    def subnet_ordering(self) -> Optional[pulumi.Input[str]]:
        """
        How subnets in this section are ordered.
        """
        return pulumi.get(self, "subnet_ordering")

    @subnet_ordering.setter
    def subnet_ordering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_ordering", value)


@pulumi.input_type
class _SectionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 dns_resolver_id: Optional[pulumi.Input[int]] = None,
                 edit_date: Optional[pulumi.Input[str]] = None,
                 master_section_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 section_id: Optional[pulumi.Input[int]] = None,
                 show_supernet_only: Optional[pulumi.Input[bool]] = None,
                 show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 strict_mode: Optional[pulumi.Input[bool]] = None,
                 subnet_ordering: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Section resources.
        :param pulumi.Input[str] description: The section's description.
        :param pulumi.Input[int] display_order: The section's display order number.
        :param pulumi.Input[int] dns_resolver_id: The ID of the DNS resolver to use in the
               section.
        :param pulumi.Input[str] edit_date: The date this resource was last edited.
        :param pulumi.Input[int] master_section_id: The ID of the parent section in the PHPIPAM
               database.
        :param pulumi.Input[str] name: The name of the section.
        :param pulumi.Input[int] section_id: The ID of the section in the PHPIPAM database.
        :param pulumi.Input[bool] show_supernet_only: `true` if supernets are only being shown in
               the subnet listing.
        :param pulumi.Input[bool] show_vlan_in_subnet_listing: `true` if VLANs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] show_vrf_in_subnet_listing: `true` if VRFs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] strict_mode: `true` if this subnet is set up to check that IP
               addresses are valid for the subnets they are in.
        :param pulumi.Input[str] subnet_ordering: How subnets in this section are ordered.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if dns_resolver_id is not None:
            pulumi.set(__self__, "dns_resolver_id", dns_resolver_id)
        if edit_date is not None:
            pulumi.set(__self__, "edit_date", edit_date)
        if master_section_id is not None:
            pulumi.set(__self__, "master_section_id", master_section_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if section_id is not None:
            pulumi.set(__self__, "section_id", section_id)
        if show_supernet_only is not None:
            pulumi.set(__self__, "show_supernet_only", show_supernet_only)
        if show_vlan_in_subnet_listing is not None:
            pulumi.set(__self__, "show_vlan_in_subnet_listing", show_vlan_in_subnet_listing)
        if show_vrf_in_subnet_listing is not None:
            pulumi.set(__self__, "show_vrf_in_subnet_listing", show_vrf_in_subnet_listing)
        if strict_mode is not None:
            pulumi.set(__self__, "strict_mode", strict_mode)
        if subnet_ordering is not None:
            pulumi.set(__self__, "subnet_ordering", subnet_ordering)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The section's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[pulumi.Input[int]]:
        """
        The section's display order number.
        """
        return pulumi.get(self, "display_order")

    @display_order.setter
    def display_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "display_order", value)

    @property
    @pulumi.getter(name="dnsResolverId")
    def dns_resolver_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the DNS resolver to use in the
        section.
        """
        return pulumi.get(self, "dns_resolver_id")

    @dns_resolver_id.setter
    def dns_resolver_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_resolver_id", value)

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date this resource was last edited.
        """
        return pulumi.get(self, "edit_date")

    @edit_date.setter
    def edit_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edit_date", value)

    @property
    @pulumi.getter(name="masterSectionId")
    def master_section_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the parent section in the PHPIPAM
        database.
        """
        return pulumi.get(self, "master_section_id")

    @master_section_id.setter
    def master_section_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_section_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the section.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the section in the PHPIPAM database.
        """
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="showSupernetOnly")
    def show_supernet_only(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if supernets are only being shown in
        the subnet listing.
        """
        return pulumi.get(self, "show_supernet_only")

    @show_supernet_only.setter
    def show_supernet_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_supernet_only", value)

    @property
    @pulumi.getter(name="showVlanInSubnetListing")
    def show_vlan_in_subnet_listing(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if VLANs are being shown in
        the subnet listing for this section.
        """
        return pulumi.get(self, "show_vlan_in_subnet_listing")

    @show_vlan_in_subnet_listing.setter
    def show_vlan_in_subnet_listing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_vlan_in_subnet_listing", value)

    @property
    @pulumi.getter(name="showVrfInSubnetListing")
    def show_vrf_in_subnet_listing(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if VRFs are being shown in
        the subnet listing for this section.
        """
        return pulumi.get(self, "show_vrf_in_subnet_listing")

    @show_vrf_in_subnet_listing.setter
    def show_vrf_in_subnet_listing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_vrf_in_subnet_listing", value)

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` if this subnet is set up to check that IP
        addresses are valid for the subnets they are in.
        """
        return pulumi.get(self, "strict_mode")

    @strict_mode.setter
    def strict_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strict_mode", value)

    @property
    @pulumi.getter(name="subnetOrdering")
    def subnet_ordering(self) -> Optional[pulumi.Input[str]]:
        """
        How subnets in this section are ordered.
        """
        return pulumi.get(self, "subnet_ordering")

    @subnet_ordering.setter
    def subnet_ordering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_ordering", value)


class Section(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 dns_resolver_id: Optional[pulumi.Input[int]] = None,
                 master_section_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 show_supernet_only: Optional[pulumi.Input[bool]] = None,
                 show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 strict_mode: Optional[pulumi.Input[bool]] = None,
                 subnet_ordering: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Section resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The section's description.
        :param pulumi.Input[int] display_order: The section's display order number.
        :param pulumi.Input[int] dns_resolver_id: The ID of the DNS resolver to use in the
               section.
        :param pulumi.Input[int] master_section_id: The ID of the parent section in the PHPIPAM
               database.
        :param pulumi.Input[str] name: The name of the section.
        :param pulumi.Input[bool] show_supernet_only: `true` if supernets are only being shown in
               the subnet listing.
        :param pulumi.Input[bool] show_vlan_in_subnet_listing: `true` if VLANs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] show_vrf_in_subnet_listing: `true` if VRFs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] strict_mode: `true` if this subnet is set up to check that IP
               addresses are valid for the subnets they are in.
        :param pulumi.Input[str] subnet_ordering: How subnets in this section are ordered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SectionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Section resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_order: Optional[pulumi.Input[int]] = None,
                 dns_resolver_id: Optional[pulumi.Input[int]] = None,
                 master_section_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 show_supernet_only: Optional[pulumi.Input[bool]] = None,
                 show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
                 strict_mode: Optional[pulumi.Input[bool]] = None,
                 subnet_ordering: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SectionArgs.__new__(SectionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["display_order"] = display_order
            __props__.__dict__["dns_resolver_id"] = dns_resolver_id
            __props__.__dict__["master_section_id"] = master_section_id
            __props__.__dict__["name"] = name
            __props__.__dict__["show_supernet_only"] = show_supernet_only
            __props__.__dict__["show_vlan_in_subnet_listing"] = show_vlan_in_subnet_listing
            __props__.__dict__["show_vrf_in_subnet_listing"] = show_vrf_in_subnet_listing
            __props__.__dict__["strict_mode"] = strict_mode
            __props__.__dict__["subnet_ordering"] = subnet_ordering
            __props__.__dict__["edit_date"] = None
            __props__.__dict__["permissions"] = None
            __props__.__dict__["section_id"] = None
        super(Section, __self__).__init__(
            'phpipam:index/section:Section',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_order: Optional[pulumi.Input[int]] = None,
            dns_resolver_id: Optional[pulumi.Input[int]] = None,
            edit_date: Optional[pulumi.Input[str]] = None,
            master_section_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[str]] = None,
            section_id: Optional[pulumi.Input[int]] = None,
            show_supernet_only: Optional[pulumi.Input[bool]] = None,
            show_vlan_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
            show_vrf_in_subnet_listing: Optional[pulumi.Input[bool]] = None,
            strict_mode: Optional[pulumi.Input[bool]] = None,
            subnet_ordering: Optional[pulumi.Input[str]] = None) -> 'Section':
        """
        Get an existing Section resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The section's description.
        :param pulumi.Input[int] display_order: The section's display order number.
        :param pulumi.Input[int] dns_resolver_id: The ID of the DNS resolver to use in the
               section.
        :param pulumi.Input[str] edit_date: The date this resource was last edited.
        :param pulumi.Input[int] master_section_id: The ID of the parent section in the PHPIPAM
               database.
        :param pulumi.Input[str] name: The name of the section.
        :param pulumi.Input[int] section_id: The ID of the section in the PHPIPAM database.
        :param pulumi.Input[bool] show_supernet_only: `true` if supernets are only being shown in
               the subnet listing.
        :param pulumi.Input[bool] show_vlan_in_subnet_listing: `true` if VLANs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] show_vrf_in_subnet_listing: `true` if VRFs are being shown in
               the subnet listing for this section.
        :param pulumi.Input[bool] strict_mode: `true` if this subnet is set up to check that IP
               addresses are valid for the subnets they are in.
        :param pulumi.Input[str] subnet_ordering: How subnets in this section are ordered.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SectionState.__new__(_SectionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["display_order"] = display_order
        __props__.__dict__["dns_resolver_id"] = dns_resolver_id
        __props__.__dict__["edit_date"] = edit_date
        __props__.__dict__["master_section_id"] = master_section_id
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["section_id"] = section_id
        __props__.__dict__["show_supernet_only"] = show_supernet_only
        __props__.__dict__["show_vlan_in_subnet_listing"] = show_vlan_in_subnet_listing
        __props__.__dict__["show_vrf_in_subnet_listing"] = show_vrf_in_subnet_listing
        __props__.__dict__["strict_mode"] = strict_mode
        __props__.__dict__["subnet_ordering"] = subnet_ordering
        return Section(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The section's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> pulumi.Output[int]:
        """
        The section's display order number.
        """
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="dnsResolverId")
    def dns_resolver_id(self) -> pulumi.Output[int]:
        """
        The ID of the DNS resolver to use in the
        section.
        """
        return pulumi.get(self, "dns_resolver_id")

    @property
    @pulumi.getter(name="editDate")
    def edit_date(self) -> pulumi.Output[str]:
        """
        The date this resource was last edited.
        """
        return pulumi.get(self, "edit_date")

    @property
    @pulumi.getter(name="masterSectionId")
    def master_section_id(self) -> pulumi.Output[int]:
        """
        The ID of the parent section in the PHPIPAM
        database.
        """
        return pulumi.get(self, "master_section_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the section.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Output[int]:
        """
        The ID of the section in the PHPIPAM database.
        """
        return pulumi.get(self, "section_id")

    @property
    @pulumi.getter(name="showSupernetOnly")
    def show_supernet_only(self) -> pulumi.Output[bool]:
        """
        `true` if supernets are only being shown in
        the subnet listing.
        """
        return pulumi.get(self, "show_supernet_only")

    @property
    @pulumi.getter(name="showVlanInSubnetListing")
    def show_vlan_in_subnet_listing(self) -> pulumi.Output[bool]:
        """
        `true` if VLANs are being shown in
        the subnet listing for this section.
        """
        return pulumi.get(self, "show_vlan_in_subnet_listing")

    @property
    @pulumi.getter(name="showVrfInSubnetListing")
    def show_vrf_in_subnet_listing(self) -> pulumi.Output[bool]:
        """
        `true` if VRFs are being shown in
        the subnet listing for this section.
        """
        return pulumi.get(self, "show_vrf_in_subnet_listing")

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> pulumi.Output[bool]:
        """
        `true` if this subnet is set up to check that IP
        addresses are valid for the subnets they are in.
        """
        return pulumi.get(self, "strict_mode")

    @property
    @pulumi.getter(name="subnetOrdering")
    def subnet_ordering(self) -> pulumi.Output[str]:
        """
        How subnets in this section are ordered.
        """
        return pulumi.get(self, "subnet_ordering")

