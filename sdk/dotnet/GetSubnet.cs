// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Phpipam
{
    public static class GetSubnet
    {
        /// <summary>
        /// ## # phpipam.Subnet
        /// 
        /// The `phpipam.Subnet` data source gets information on a subnet such as its ID
        /// (required for creating addresses), description, and more.
        /// 
        /// **Example:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SubnetAddress = "10.10.2.0",
        ///         SubnetMask = 24,
        ///     });
        /// 
        ///     // Reserve the address.
        ///     var newip = new Phpipam.Address("newip", new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///         IpAddress = "10.10.2.10",
        ///         Hostname = "tf-test-host.example.internal",
        ///         Description = "Managed by Terraform",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example with `description_match`:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SectionId = 1,
        ///         DescriptionMatch = "[Cc]ustomer 2",
        ///     });
        /// 
        ///     var nextAddress = Phpipam.GetFirstFreeAddress.Invoke(new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///     });
        /// 
        ///     // Reserve the address. Note that we use ignore_changes here to ensure that we
        ///     // don't end up re-allocating this address on future Terraform runs.
        ///     var newip = new Phpipam.Address("newip", new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///         IpAddress = nextAddress.Apply(getFirstFreeAddressResult =&gt; getFirstFreeAddressResult.IpAddress),
        ///         Hostname = "tf-test-host.example.internal",
        ///         Description = "Managed by Terraform",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `custom_field_filter`:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SectionId = 1,
        ///         CustomFieldFilter = 
        ///         {
        ///             { "custom_CustomTestSubnets", ".*terraform.*" },
        ///         },
        ///     });
        /// 
        ///     var nextAddress = Phpipam.GetFirstFreeAddress.Invoke(new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///     });
        /// 
        ///     // Reserve the address. Note that we use ignore_changes here to ensure that we
        ///     // don't end up re-allocating this address on future Terraform runs.
        ///     var newip = new Phpipam.Address("newip", new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///         IpAddress = nextAddress.Apply(getFirstFreeAddressResult =&gt; getFirstFreeAddressResult.IpAddress),
        ///         Hostname = "tf-test-host.example.internal",
        ///         Description = "Managed by Terraform",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example how to get gateway IP address by subnet_id:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var section = Phpipam.GetSection.Invoke(new()
        ///     {
        ///         Name = "Subnet Section",
        ///     });
        /// 
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SectionId = section.Apply(getSectionResult =&gt; getSectionResult.Id),
        ///         DescriptionMatch = "prod_mgmt",
        ///     });
        /// 
        ///     var gateway = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         AddressId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.GatewayId),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("phpipam:index/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        /// <summary>
        /// ## # phpipam.Subnet
        /// 
        /// The `phpipam.Subnet` data source gets information on a subnet such as its ID
        /// (required for creating addresses), description, and more.
        /// 
        /// **Example:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SubnetAddress = "10.10.2.0",
        ///         SubnetMask = 24,
        ///     });
        /// 
        ///     // Reserve the address.
        ///     var newip = new Phpipam.Address("newip", new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///         IpAddress = "10.10.2.10",
        ///         Hostname = "tf-test-host.example.internal",
        ///         Description = "Managed by Terraform",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example with `description_match`:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SectionId = 1,
        ///         DescriptionMatch = "[Cc]ustomer 2",
        ///     });
        /// 
        ///     var nextAddress = Phpipam.GetFirstFreeAddress.Invoke(new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///     });
        /// 
        ///     // Reserve the address. Note that we use ignore_changes here to ensure that we
        ///     // don't end up re-allocating this address on future Terraform runs.
        ///     var newip = new Phpipam.Address("newip", new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///         IpAddress = nextAddress.Apply(getFirstFreeAddressResult =&gt; getFirstFreeAddressResult.IpAddress),
        ///         Hostname = "tf-test-host.example.internal",
        ///         Description = "Managed by Terraform",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `custom_field_filter`:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SectionId = 1,
        ///         CustomFieldFilter = 
        ///         {
        ///             { "custom_CustomTestSubnets", ".*terraform.*" },
        ///         },
        ///     });
        /// 
        ///     var nextAddress = Phpipam.GetFirstFreeAddress.Invoke(new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///     });
        /// 
        ///     // Reserve the address. Note that we use ignore_changes here to ensure that we
        ///     // don't end up re-allocating this address on future Terraform runs.
        ///     var newip = new Phpipam.Address("newip", new()
        ///     {
        ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.SubnetId),
        ///         IpAddress = nextAddress.Apply(getFirstFreeAddressResult =&gt; getFirstFreeAddressResult.IpAddress),
        ///         Hostname = "tf-test-host.example.internal",
        ///         Description = "Managed by Terraform",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example how to get gateway IP address by subnet_id:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var section = Phpipam.GetSection.Invoke(new()
        ///     {
        ///         Name = "Subnet Section",
        ///     });
        /// 
        ///     var subnet = Phpipam.GetSubnet.Invoke(new()
        ///     {
        ///         SectionId = section.Apply(getSectionResult =&gt; getSectionResult.Id),
        ///         DescriptionMatch = "prod_mgmt",
        ///     });
        /// 
        ///     var gateway = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         AddressId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.GatewayId),
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("phpipam:index/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        [Input("customFieldFilter")]
        private Dictionary<string, object>? _customFieldFilter;

        /// <summary>
        /// A map of custom fields to search for. The filter
        /// values are regular expressions that follow the RE2 syntax for which you can
        /// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
        /// fields need to match for the match to succeed.
        /// 
        /// ⚠️  **NOTE:** Searches with the `description`, `description_match` and
        /// `custom_field_filter` fields return the first match found without any warnings.
        /// Conversely, the resource fails if it somehow finds multiple results on a CIDR
        /// (subnet and mask) search - this is to assert that you are getting the subnet you
        /// requested. If you want to return multiple results, combine this data source with
        /// the `phpipam.getSubnets` data source. Custom fileds must contain
        /// mandatory prefix `custom_`.
        /// 
        /// ⚠️  **NOTE:** An empty or unspecified `custom_field_filter` value is the
        /// equivalent to a regular expression that matches everything, and hence will
        /// return the first subnetit sees in the section.
        /// 
        /// Arguments are processed in the following order of precedence:
        /// </summary>
        public Dictionary<string, object> CustomFieldFilter
        {
            get => _customFieldFilter ?? (_customFieldFilter = new Dictionary<string, object>());
            set => _customFieldFilter = value;
        }

        /// <summary>
        /// The subnet's description. `section_id` is required if you
        /// want to use this option.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// A regular expression to match against when searching
        /// for a subnet. `section_id` is required if you want to use this option.
        /// </summary>
        [Input("descriptionMatch")]
        public string? DescriptionMatch { get; set; }

        /// <summary>
        /// , and either one of `description`, `description_match`, or
        /// `custom_field_filter`
        /// </summary>
        [Input("sectionId")]
        public int? SectionId { get; set; }

        /// <summary>
        /// and `subnet_mask`
        /// </summary>
        [Input("subnetAddress")]
        public string? SubnetAddress { get; set; }

        [Input("subnetId")]
        public int? SubnetId { get; set; }

        /// <summary>
        /// The subnet mask, in bits, of the subnet to look up.
        /// </summary>
        [Input("subnetMask")]
        public int? SubnetMask { get; set; }

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("customFieldFilter")]
        private InputMap<object>? _customFieldFilter;

        /// <summary>
        /// A map of custom fields to search for. The filter
        /// values are regular expressions that follow the RE2 syntax for which you can
        /// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
        /// fields need to match for the match to succeed.
        /// 
        /// ⚠️  **NOTE:** Searches with the `description`, `description_match` and
        /// `custom_field_filter` fields return the first match found without any warnings.
        /// Conversely, the resource fails if it somehow finds multiple results on a CIDR
        /// (subnet and mask) search - this is to assert that you are getting the subnet you
        /// requested. If you want to return multiple results, combine this data source with
        /// the `phpipam.getSubnets` data source. Custom fileds must contain
        /// mandatory prefix `custom_`.
        /// 
        /// ⚠️  **NOTE:** An empty or unspecified `custom_field_filter` value is the
        /// equivalent to a regular expression that matches everything, and hence will
        /// return the first subnetit sees in the section.
        /// 
        /// Arguments are processed in the following order of precedence:
        /// </summary>
        public InputMap<object> CustomFieldFilter
        {
            get => _customFieldFilter ?? (_customFieldFilter = new InputMap<object>());
            set => _customFieldFilter = value;
        }

        /// <summary>
        /// The subnet's description. `section_id` is required if you
        /// want to use this option.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A regular expression to match against when searching
        /// for a subnet. `section_id` is required if you want to use this option.
        /// </summary>
        [Input("descriptionMatch")]
        public Input<string>? DescriptionMatch { get; set; }

        /// <summary>
        /// , and either one of `description`, `description_match`, or
        /// `custom_field_filter`
        /// </summary>
        [Input("sectionId")]
        public Input<int>? SectionId { get; set; }

        /// <summary>
        /// and `subnet_mask`
        /// </summary>
        [Input("subnetAddress")]
        public Input<string>? SubnetAddress { get; set; }

        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        /// <summary>
        /// The subnet mask, in bits, of the subnet to look up.
        /// </summary>
        [Input("subnetMask")]
        public Input<int>? SubnetMask { get; set; }

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// `true` if the subnet allows IP requests in PHPIPAM.
        /// </summary>
        public readonly bool AllowIpRequests;
        /// <summary>
        /// `true` if PTR records are created for addresses in
        /// this subnet.
        /// </summary>
        public readonly bool CreatePtrRecords;
        public readonly ImmutableDictionary<string, object>? CustomFieldFilter;
        /// <summary>
        /// A key/value map of custom fields for this subnet.
        /// </summary>
        public readonly ImmutableDictionary<string, object> CustomFields;
        /// <summary>
        /// The description set for the subnet.
        /// </summary>
        public readonly string Description;
        public readonly string? DescriptionMatch;
        /// <summary>
        /// `true` if hostnames are displayed instead of IP
        /// addresses in the address listing for this subnet.
        /// </summary>
        public readonly bool DisplayHostnames;
        /// <summary>
        /// The date this resource was last updated.
        /// </summary>
        public readonly string EditDate;
        /// <summary>
        /// Key map of values: ip_addr, id. ip_addr - this is gateway IP address
        /// (like 192.168.1.254). id - gateway ip ID
        /// </summary>
        public readonly ImmutableDictionary<string, object> Gateway;
        /// <summary>
        /// The ID of gateway IP address fot this subnet
        /// </summary>
        public readonly string GatewayId;
        /// <summary>
        /// `true` if this subnet is included in new host
        /// scans.
        /// </summary>
        public readonly bool HostDiscoveryEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// `true` if this subnet is included in ping probes.
        /// </summary>
        public readonly bool IncludeInPing;
        /// <summary>
        /// `true` if this subnet is a folder and not an actual subnet.
        /// </summary>
        public readonly bool IsFolder;
        /// <summary>
        /// `true` if the subnet has been marked as full.
        /// </summary>
        public readonly bool IsFull;
        /// <summary>
        /// The ID of the linked subnet in the PHPIPAM database.
        /// </summary>
        public readonly int LinkedSubnetId;
        /// <summary>
        /// The ID of the location for this subnet.
        /// </summary>
        public readonly int LocationId;
        /// <summary>
        /// The ID of the parent subnet for this subnet in the
        /// PHPIPAM database.
        /// </summary>
        public readonly int MasterSubnetId;
        /// <summary>
        /// The ID of the nameserver used to assign PTR records for
        /// this subnet.
        /// </summary>
        public readonly int NameserverId;
        public readonly ImmutableDictionary<string, object> Nameservers;
        public readonly int ParentSubnetId;
        /// <summary>
        /// A JSON representation of the permissions associated with this
        /// subnet.
        /// </summary>
        public readonly string Permissions;
        /// <summary>
        /// `true` if enabled resolving of DNS names.
        /// </summary>
        public readonly bool ResolveDns;
        /// <summary>
        /// The ID of the ping scan agent that is used for this subnet.
        /// </summary>
        public readonly int ScanAgentId;
        /// <summary>
        /// The ID of the section for this address in the PHPIPAM
        /// database.
        /// </summary>
        public readonly int SectionId;
        /// <summary>
        /// `true` if the subnet name is are shown in the section, instead
        /// of the network address.
        /// </summary>
        public readonly bool ShowName;
        /// <summary>
        /// The network address of the subnet.
        /// </summary>
        public readonly string SubnetAddress;
        /// <summary>
        /// The ID of the subnet in the PHPIPAM database.
        /// </summary>
        public readonly int SubnetId;
        /// <summary>
        /// The subnet mask, in bits.
        /// </summary>
        public readonly int SubnetMask;
        /// <summary>
        /// The subnet's utilization threshold.
        /// </summary>
        public readonly int UtilizationThreshold;
        /// <summary>
        /// The ID of the VLAN for this subnet in the PHPIPAM database.
        /// </summary>
        public readonly int VlanId;
        /// <summary>
        /// The ID of the VRF for this subnet in the PHPIPAM database.
        /// </summary>
        public readonly int VrfId;

        [OutputConstructor]
        private GetSubnetResult(
            bool allowIpRequests,

            bool createPtrRecords,

            ImmutableDictionary<string, object>? customFieldFilter,

            ImmutableDictionary<string, object> customFields,

            string description,

            string? descriptionMatch,

            bool displayHostnames,

            string editDate,

            ImmutableDictionary<string, object> gateway,

            string gatewayId,

            bool hostDiscoveryEnabled,

            string id,

            bool includeInPing,

            bool isFolder,

            bool isFull,

            int linkedSubnetId,

            int locationId,

            int masterSubnetId,

            int nameserverId,

            ImmutableDictionary<string, object> nameservers,

            int parentSubnetId,

            string permissions,

            bool resolveDns,

            int scanAgentId,

            int sectionId,

            bool showName,

            string subnetAddress,

            int subnetId,

            int subnetMask,

            int utilizationThreshold,

            int vlanId,

            int vrfId)
        {
            AllowIpRequests = allowIpRequests;
            CreatePtrRecords = createPtrRecords;
            CustomFieldFilter = customFieldFilter;
            CustomFields = customFields;
            Description = description;
            DescriptionMatch = descriptionMatch;
            DisplayHostnames = displayHostnames;
            EditDate = editDate;
            Gateway = gateway;
            GatewayId = gatewayId;
            HostDiscoveryEnabled = hostDiscoveryEnabled;
            Id = id;
            IncludeInPing = includeInPing;
            IsFolder = isFolder;
            IsFull = isFull;
            LinkedSubnetId = linkedSubnetId;
            LocationId = locationId;
            MasterSubnetId = masterSubnetId;
            NameserverId = nameserverId;
            Nameservers = nameservers;
            ParentSubnetId = parentSubnetId;
            Permissions = permissions;
            ResolveDns = resolveDns;
            ScanAgentId = scanAgentId;
            SectionId = sectionId;
            ShowName = showName;
            SubnetAddress = subnetAddress;
            SubnetId = subnetId;
            SubnetMask = subnetMask;
            UtilizationThreshold = utilizationThreshold;
            VlanId = vlanId;
            VrfId = vrfId;
        }
    }
}
