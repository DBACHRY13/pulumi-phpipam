// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Phpipam
{
    public static class GetAddresses
    {
        public static Task<GetAddressesResult> InvokeAsync(GetAddressesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAddressesResult>("phpipam:index/getAddresses:getAddresses", args ?? new GetAddressesArgs(), options.WithDefaults());

        public static Output<GetAddressesResult> Invoke(GetAddressesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAddressesResult>("phpipam:index/getAddresses:getAddresses", args ?? new GetAddressesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAddressesArgs : global::Pulumi.InvokeArgs
    {
        [Input("customFieldFilter")]
        private Dictionary<string, object>? _customFieldFilter;

        /// <summary>
        /// A map of custom fields to search for. The filter
        /// values are regular expressions that follow the RE2 syntax for which you can
        /// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
        /// fields need to match for the match to succeed.
        /// 
        /// ⚠️  **NOTE:** An empty or unspecified `custom_field_filter` value is the
        /// equivalent to a regular expression that matches everything, and hence will
        /// return **all** addresses that contain the referenced custom field key!
        /// Custom fileds must contain mandatory prefix `custom_`.
        /// </summary>
        public Dictionary<string, object> CustomFieldFilter
        {
            get => _customFieldFilter ?? (_customFieldFilter = new Dictionary<string, object>());
            set => _customFieldFilter = value;
        }

        /// <summary>
        /// The description of the IP address. `subnet_id` is required
        /// when using this field.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The host name of the IP address. `subnet_id` is required when
        /// using this field.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// The ID of the subnet that the address resides in. This is
        /// required to search on the `description` or `hostname` fields.
        /// 
        /// One of the following fields is required alongside `subnet_id`:
        /// </summary>
        [Input("subnetId", required: true)]
        public int SubnetId { get; set; }

        public GetAddressesArgs()
        {
        }
        public static new GetAddressesArgs Empty => new GetAddressesArgs();
    }

    public sealed class GetAddressesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("customFieldFilter")]
        private InputMap<object>? _customFieldFilter;

        /// <summary>
        /// A map of custom fields to search for. The filter
        /// values are regular expressions that follow the RE2 syntax for which you can
        /// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
        /// fields need to match for the match to succeed.
        /// 
        /// ⚠️  **NOTE:** An empty or unspecified `custom_field_filter` value is the
        /// equivalent to a regular expression that matches everything, and hence will
        /// return **all** addresses that contain the referenced custom field key!
        /// Custom fileds must contain mandatory prefix `custom_`.
        /// </summary>
        public InputMap<object> CustomFieldFilter
        {
            get => _customFieldFilter ?? (_customFieldFilter = new InputMap<object>());
            set => _customFieldFilter = value;
        }

        /// <summary>
        /// The description of the IP address. `subnet_id` is required
        /// when using this field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The host name of the IP address. `subnet_id` is required when
        /// using this field.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The ID of the subnet that the address resides in. This is
        /// required to search on the `description` or `hostname` fields.
        /// 
        /// One of the following fields is required alongside `subnet_id`:
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<int> SubnetId { get; set; } = null!;

        public GetAddressesInvokeArgs()
        {
        }
        public static new GetAddressesInvokeArgs Empty => new GetAddressesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAddressesResult
    {
        /// <summary>
        /// A list of discovered IP address IDs.
        /// </summary>
        public readonly ImmutableArray<int> AddressIds;
        public readonly ImmutableDictionary<string, object>? CustomFieldFilter;
        public readonly string? Description;
        public readonly string? Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int SubnetId;

        [OutputConstructor]
        private GetAddressesResult(
            ImmutableArray<int> addressIds,

            ImmutableDictionary<string, object>? customFieldFilter,

            string? description,

            string? hostname,

            string id,

            int subnetId)
        {
            AddressIds = addressIds;
            CustomFieldFilter = customFieldFilter;
            Description = description;
            Hostname = hostname;
            Id = id;
            SubnetId = subnetId;
        }
    }
}
