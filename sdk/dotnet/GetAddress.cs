// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Phpipam
{
    public static class GetAddress
    {
        /// <summary>
        /// ## # phpipam.Address
        /// 
        /// The `phpipam.Address` data source allows one to get information about a specific
        /// IP address within PHPIPAM. Use this address to get general information about a
        /// specific IP address such as its host name, description and more.
        /// 
        /// Lookups for IP addresses can only happen at this time via its entry in the
        /// database, or the IP address itself. Future versions of this resource, when such
        /// features become generally available in the PHPIPAM API, will allow lookup based
        /// on host name, allowing for better ability for this resource to discover IP
        /// addresses that have been pre-assigned for a specific resource.
        /// 
        /// **Example:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var address = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         IpAddress = "10.10.1.1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["addressDescription"] = address.Apply(getAddressResult =&gt; getAddressResult.Description),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `subnet_id` when multiple subnets share the same ip ranges :**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var address = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         IpAddress = "10.10.1.1",
        ///         SubnetId = 3,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["addressDescription"] = address.Apply(getAddressResult =&gt; getAddressResult.Description),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `description`:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var address = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         SubnetId = 3,
        ///         Description = "Customer 1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["addressDescription"] = address.Apply(getAddressResult =&gt; getAddressResult.Description),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `custom_field_filter`:**
        /// </summary>
        public static Task<GetAddressResult> InvokeAsync(GetAddressArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAddressResult>("phpipam:index/getAddress:getAddress", args ?? new GetAddressArgs(), options.WithDefaults());

        /// <summary>
        /// ## # phpipam.Address
        /// 
        /// The `phpipam.Address` data source allows one to get information about a specific
        /// IP address within PHPIPAM. Use this address to get general information about a
        /// specific IP address such as its host name, description and more.
        /// 
        /// Lookups for IP addresses can only happen at this time via its entry in the
        /// database, or the IP address itself. Future versions of this resource, when such
        /// features become generally available in the PHPIPAM API, will allow lookup based
        /// on host name, allowing for better ability for this resource to discover IP
        /// addresses that have been pre-assigned for a specific resource.
        /// 
        /// **Example:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var address = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         IpAddress = "10.10.1.1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["addressDescription"] = address.Apply(getAddressResult =&gt; getAddressResult.Description),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `subnet_id` when multiple subnets share the same ip ranges :**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var address = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         IpAddress = "10.10.1.1",
        ///         SubnetId = 3,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["addressDescription"] = address.Apply(getAddressResult =&gt; getAddressResult.Description),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `description`:**
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Phpipam = Pulumi.Phpipam;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var address = Phpipam.GetAddress.Invoke(new()
        ///     {
        ///         SubnetId = 3,
        ///         Description = "Customer 1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["addressDescription"] = address.Apply(getAddressResult =&gt; getAddressResult.Description),
        ///     };
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// **Example With `custom_field_filter`:**
        /// </summary>
        public static Output<GetAddressResult> Invoke(GetAddressInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAddressResult>("phpipam:index/getAddress:getAddress", args ?? new GetAddressInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAddressArgs : global::Pulumi.InvokeArgs
    {
        [Input("addressId")]
        public int? AddressId { get; set; }

        [Input("customFieldFilter")]
        private Dictionary<string, object>? _customFieldFilter;

        /// <summary>
        /// A map of custom fields to search for. The filter
        /// values are regular expressions that follow the RE2 syntax for which you can
        /// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
        /// fields need to match for the match to succeed.
        /// 
        /// ⚠️ **NOTE:** `description`, `hostname`, and `custom_field_filter` fields return
        /// the first match found without any warnings. If you are looking to return
        /// multiple addresses, combine this data source with the
        /// `phpipam.getAddresses` data source.
        /// 
        /// ⚠️ **NOTE:** An empty or unspecified `custom_field_filter` value is the
        /// equivalent to a regular expression that matches everything, and hence will
        /// return the first address it sees in the subnet. Custom fileds must contain mandatory
        /// prefix `custom_`.
        /// 
        /// Arguments are processed in the following order of precedence:
        /// </summary>
        public Dictionary<string, object> CustomFieldFilter
        {
            get => _customFieldFilter ?? (_customFieldFilter = new Dictionary<string, object>());
            set => _customFieldFilter = value;
        }

        /// <summary>
        /// The description of the IP address. `subnet_id` is required
        /// when using this field.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The host name of the IP address. `subnet_id` is required when
        /// using this field.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// , and either one of `description`, `hostname`, or
        /// `custom_field_filter`
        /// </summary>
        [Input("subnetId")]
        public int? SubnetId { get; set; }

        public GetAddressArgs()
        {
        }
        public static new GetAddressArgs Empty => new GetAddressArgs();
    }

    public sealed class GetAddressInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("addressId")]
        public Input<int>? AddressId { get; set; }

        [Input("customFieldFilter")]
        private InputMap<object>? _customFieldFilter;

        /// <summary>
        /// A map of custom fields to search for. The filter
        /// values are regular expressions that follow the RE2 syntax for which you can
        /// find documentation [here](https://github.com/google/re2/wiki/Syntax). All
        /// fields need to match for the match to succeed.
        /// 
        /// ⚠️ **NOTE:** `description`, `hostname`, and `custom_field_filter` fields return
        /// the first match found without any warnings. If you are looking to return
        /// multiple addresses, combine this data source with the
        /// `phpipam.getAddresses` data source.
        /// 
        /// ⚠️ **NOTE:** An empty or unspecified `custom_field_filter` value is the
        /// equivalent to a regular expression that matches everything, and hence will
        /// return the first address it sees in the subnet. Custom fileds must contain mandatory
        /// prefix `custom_`.
        /// 
        /// Arguments are processed in the following order of precedence:
        /// </summary>
        public InputMap<object> CustomFieldFilter
        {
            get => _customFieldFilter ?? (_customFieldFilter = new InputMap<object>());
            set => _customFieldFilter = value;
        }

        /// <summary>
        /// The description of the IP address. `subnet_id` is required
        /// when using this field.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The host name of the IP address. `subnet_id` is required when
        /// using this field.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// , and either one of `description`, `hostname`, or
        /// `custom_field_filter`
        /// </summary>
        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        public GetAddressInvokeArgs()
        {
        }
        public static new GetAddressInvokeArgs Empty => new GetAddressInvokeArgs();
    }


    [OutputType]
    public sealed class GetAddressResult
    {
        /// <summary>
        /// The ID of the IP address in the PHPIPAM database.
        /// </summary>
        public readonly int AddressId;
        public readonly ImmutableDictionary<string, object>? CustomFieldFilter;
        /// <summary>
        /// A key/value map of custom fields for this address.
        /// </summary>
        public readonly ImmutableDictionary<string, object> CustomFields;
        /// <summary>
        /// The description provided to this IP address.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the associated device in the PHPIPAM database.
        /// </summary>
        public readonly int DeviceId;
        /// <summary>
        /// The last time this resource was modified.
        /// </summary>
        public readonly string EditDate;
        /// <summary>
        /// `true` if this address is excluded from ping probes.
        /// </summary>
        public readonly bool ExcludePing;
        /// <summary>
        /// The hostname supplied to this IP address.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// the IP address.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// `true` if this IP address has been designated as a gateway.
        /// </summary>
        public readonly bool IsGateway;
        /// <summary>
        /// The last time this IP address answered ping probes.
        /// </summary>
        public readonly string LastSeen;
        /// <summary>
        /// The MAC address provided to this IP address.
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// The note supplied to this IP address.
        /// </summary>
        public readonly string Note;
        /// <summary>
        /// The owner name provided to this IP address.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// The ID of the associated PTR record in the PHPIPAM
        /// database.
        /// </summary>
        public readonly int PtrRecordId;
        /// <summary>
        /// `true` if PTR records are not being created for this IP
        /// address.
        /// </summary>
        public readonly bool SkipPtrRecord;
        /// <summary>
        /// The tag ID in the database for the IP address' specific
        /// state. **NOTE:** This is currently represented as an integer but may change
        /// to the specific string representation at a later time.
        /// </summary>
        public readonly int StateTagId;
        /// <summary>
        /// The database ID of the subnet this IP address belongs to.
        /// </summary>
        public readonly int SubnetId;
        /// <summary>
        /// A string port label that is associated with this
        /// address.
        /// </summary>
        public readonly string SwitchPortLabel;

        [OutputConstructor]
        private GetAddressResult(
            int addressId,

            ImmutableDictionary<string, object>? customFieldFilter,

            ImmutableDictionary<string, object> customFields,

            string description,

            int deviceId,

            string editDate,

            bool excludePing,

            string hostname,

            string id,

            string ipAddress,

            bool isGateway,

            string lastSeen,

            string macAddress,

            string note,

            string owner,

            int ptrRecordId,

            bool skipPtrRecord,

            int stateTagId,

            int subnetId,

            string switchPortLabel)
        {
            AddressId = addressId;
            CustomFieldFilter = customFieldFilter;
            CustomFields = customFields;
            Description = description;
            DeviceId = deviceId;
            EditDate = editDate;
            ExcludePing = excludePing;
            Hostname = hostname;
            Id = id;
            IpAddress = ipAddress;
            IsGateway = isGateway;
            LastSeen = lastSeen;
            MacAddress = macAddress;
            Note = note;
            Owner = owner;
            PtrRecordId = ptrRecordId;
            SkipPtrRecord = skipPtrRecord;
            StateTagId = stateTagId;
            SubnetId = subnetId;
            SwitchPortLabel = switchPortLabel;
        }
    }
}
