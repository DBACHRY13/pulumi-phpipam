// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Phpipam
{
    public static class GetFirstFreeSubnet
    {
        public static Task<GetFirstFreeSubnetResult> InvokeAsync(GetFirstFreeSubnetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirstFreeSubnetResult>("phpipam:index/getFirstFreeSubnet:getFirstFreeSubnet", args ?? new GetFirstFreeSubnetArgs(), options.WithDefaults());

        public static Output<GetFirstFreeSubnetResult> Invoke(GetFirstFreeSubnetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirstFreeSubnetResult>("phpipam:index/getFirstFreeSubnet:getFirstFreeSubnet", args ?? new GetFirstFreeSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirstFreeSubnetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the subnet to look up the subnet in.
        /// </summary>
        [Input("subnetId", required: true)]
        public int SubnetId { get; set; }

        /// <summary>
        /// Mask that will be used to look next available subnet
        /// </summary>
        [Input("subnetMask", required: true)]
        public int SubnetMask { get; set; }

        public GetFirstFreeSubnetArgs()
        {
        }
        public static new GetFirstFreeSubnetArgs Empty => new GetFirstFreeSubnetArgs();
    }

    public sealed class GetFirstFreeSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the subnet to look up the subnet in.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<int> SubnetId { get; set; } = null!;

        /// <summary>
        /// Mask that will be used to look next available subnet
        /// </summary>
        [Input("subnetMask", required: true)]
        public Input<int> SubnetMask { get; set; } = null!;

        public GetFirstFreeSubnetInvokeArgs()
        {
        }
        public static new GetFirstFreeSubnetInvokeArgs Empty => new GetFirstFreeSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirstFreeSubnetResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The next available IP address.
        /// </summary>
        public readonly string IpAddress;
        public readonly int SubnetId;
        public readonly int SubnetMask;

        [OutputConstructor]
        private GetFirstFreeSubnetResult(
            string id,

            string ipAddress,

            int subnetId,

            int subnetMask)
        {
            Id = id;
            IpAddress = ipAddress;
            SubnetId = subnetId;
            SubnetMask = subnetMask;
        }
    }
}
